// Render settings
const SCREEN_WIDTH = 120;
const SCREEN_HEIGHT = 40;

// Key pipe settings
const KEY_PIPE_PATH = current_path + "/3d.pipe";

// Map settings
const MAP_WIDTH = 16;
const MAP_HEIGHT = 16;

const DEPTH = 16;

var computer = get_shell().host_computer();

/*
    @description Prints character stream to console
    @param screen Character stream
*/
fn WriteScreen(screen: string[]) {
    let f: string[] = [];
    for let i = 1; i <= SCREEN_HEIGHT; i=i+1 {
        f.push(cast<string[]>(slice(screen, SCREEN_WIDTH*(i-1), SCREEN_WIDTH*i)).join(""));
    }
    
    print(f.join(char(10)) + char(0), true);
}

/*
    @description Setups key pipeline
*/
fn SetupKeyPipe() -> file {
    if computer.File(KEY_PIPE_PATH) != null {
        computer.File(KEY_PIPE_PATH).delete();
    }

    computer.touch(current_path, "3d.pipe");
    return computer.File(KEY_PIPE_PATH);
}

/*
    @description Consumes keypress
*/
fn GetKeypress(pipe: file) -> string {
    let k = pipe.get_content();
    if k != "" pipe.set_content("");
    else return null;
    return k;
}

/*
    @description Server that handles keypresses
*/
fn runKeyServer() {
    let pipe: file;
    do {
        pipe = computer.File(KEY_PIPE_PATH);
        print("Waiting for pipe...", true);
    } while pipe == null;
    clear_screen();
    do {
        let inp = user_input("", false, true);
        pipe.set_content(inp);
        pipe = computer.File(KEY_PIPE_PATH);
    } while pipe != null;
}

/*
    @description Overwrites a array within the buffer with the string
*/
fn WriteToBuffer(buffer: string[], position: number, data: string) {
    for let i = 0; i < data.len; i=i+1 {
        buffer[position+i] = data[i];
    }
}

class Player {
    public let X: number;
    public let Y: number;
    public let Angle: number;

    public let FOV: number;

    public fn Player() {
        self.X = 8;
        self.Y = 8;
        self.Angle = 0;
        self.FOV = pi / 4;
    }

    public fn TurnLeft(elapsedTime: number=1) {
        self.Angle = self.Angle - (0.8 * elapsedTime);
    }

    public fn TurnRight(elapsedTime: number=1) {
        self.Angle = self.Angle + (0.8 * elapsedTime);
    }

    public fn MoveUp(elapsedTime: number=1) {
        self.X = self.X + (sin(self.Angle) * 2 * elapsedTime);
        self.Y = self.Y + (cos(self.Angle) * 2 * elapsedTime);
    }

    public fn MoveDown(elapsedTime: number=1) {
        self.X = self.X - (sin(self.Angle) * 2 * elapsedTime);
        self.Y = self.Y - (cos(self.Angle) * 2 * elapsedTime);
    }
}

fn main() {
    // Setup screen buffer
    let screen: string[] = [];
    for let i = 1; i <= SCREEN_WIDTH*SCREEN_HEIGHT; i=i+1 {
        screen.push("#");
    }

    let player = new Player(); // Create player object
    let pipe = SetupKeyPipe(); // Create keypress pipeline

    let map = [
        "################",
        "#..........#...#",
        "#..........#...#",
        "#...#......#...#",
        "#...#......#####",
        "#...#..........#",
        "#...#..........#",
        "#..............#",
        "#..............#",
        "#....#####.....#",
        "#..............#",
        "#...############",
        "#..........#...#",
        "#..........#...#",
        "#..............#",
        "################"
    ].join("");

    // Time handling for controls
    let tp1 = time;
    let tp2 = time;

    // Render loop
    while true {
        tp2 = time;
        let elapsedTime = tp2 - tp1;
        tp1 = tp2;

        // Controls
        // Handle CCW Rotation
        let key = GetKeypress(pipe);
        if key == "End" break;

        if key == "LeftArrow"
            player.TurnLeft(elapsedTime);
        
        if key == "RightArrow"
            player.TurnRight(elapsedTime);

        if key == "UpArrow" {
            player.MoveUp(elapsedTime);

            if map[floor(player.Y) * MAP_WIDTH + floor(player.X)] == "#" {
                player.MoveDown(elapsedTime);
            }
        }

        if key == "DownArrow" {
            player.MoveDown(elapsedTime);

            if map[floor(player.Y) * MAP_WIDTH + floor(player.X)] == "#" {
                player.MoveUp(elapsedTime);
            }
        }

        if key == "PageUp"
            player.FOV = player.FOV + 1;
        
        if key == "PageDown"
            player.FOV = player.FOV - 1;

        for let x = 0; x < SCREEN_WIDTH; x=x+1 {
            // For each column, calculate the projected ray angle into world space
            let rayAngle = (player.Angle - player.FOV / 2) + (x / SCREEN_WIDTH) * player.FOV;

            let distanceToWall = 0;
            let hitWall = false;
            let boundary = false;

            let eyeX = sin(rayAngle); // Unit vector for ray in player space
            let eyeY = cos(rayAngle);

            while (!hitWall) && distanceToWall < DEPTH {
                distanceToWall = distanceToWall + 0.1;

                let testX = floor(player.X + eyeX * distanceToWall);
                let testY = floor(player.Y + eyeY * distanceToWall);

                // Test if ray is out of bounds
                if testX < 0 || testX >= MAP_WIDTH || testY < 0 || testY >= MAP_HEIGHT {
                    hitWall = true;
                    distanceToWall = DEPTH;
                } else {
                    // Ray is inbounds so test to see if the ray cell is a wall block
                    if map[testY * MAP_WIDTH + testX] == "#" {
                        hitWall = true;
                        let p: number[][] = []; // distance, dot
                        for let tx = 0; tx < 2; tx=tx+1 {
                            for let ty = 0; ty < 2; ty=ty+1 {
                                let vy = testY + ty - player.Y;
                                let vx = testX + tx - player.X;
                                let d = sqrt(vx*vx + vy*vy);
                                let dot = (eyeX * vx / d) + (eyeY * vy / d);
                                p.push([d, dot]);
                            }
                        }

                        p.sort(0);
                        const bound = 0.01;
                        if acos(p[0][1]) < bound boundary = true;
                        if acos(p[1][1]) < bound boundary = true;
                        if acos(p[2][1]) < bound boundary = true;
                    }
                }
            }

            // Calculate distance to ceiling and floor
            let ceiling = floor((SCREEN_HEIGHT / 2) - SCREEN_HEIGHT / distanceToWall);
            let nFloor = SCREEN_HEIGHT - ceiling;

            let shade = " ";
            
            if distanceToWall <= DEPTH / 4     { shade = "<mark=#ffffff>#</mark>"; }
            else if distanceToWall < DEPTH / 3 { shade = "<mark=#CCCCCC>#</mark>"; }
            else if distanceToWall < DEPTH / 2 { shade = "<mark=#999999>#</mark>"; }
            else if distanceToWall < DEPTH     { shade = "<mark=#666666>#</mark>"; }
            else                               { shade = " ";                        }

            if boundary { shade = " "; }

            for let y = 0; y < SCREEN_HEIGHT; y=y+1 {
                if y < ceiling {
                    screen[y*SCREEN_WIDTH + x] = " ";
                } else if y > ceiling && y <= nFloor {
                    screen[y*SCREEN_WIDTH + x] = shade;
                } else {
                    let b = 1 - ((y - SCREEN_HEIGHT / 2) /  (SCREEN_HEIGHT / 2));
                    let fshade = " ";
                    if b < 0.25      { fshade = "="; }
                    else if b < 0.5  { fshade = "x"; }
                    else if b < 0.75 { fshade = "."; }
                    else if b < 0.9  { fshade = "-"; }
                    else             { fshade = " "; }
                    
                    screen[y*SCREEN_WIDTH + x] = fshade;
                }
            }
        }

        // Display Stats
        WriteToBuffer(screen, 0, "X=" + round(player.X, 2) + ", Y=" + round(player.Y, 2) + ", A=" + round(player.Angle, 2) + ", FOV=" + player.FOV + ", FPS=" + round(1/elapsedTime, 2));

        // Display Map
        for let nx = 0; nx < MAP_WIDTH; nx=nx+1 {
            for let ny = 0; ny < MAP_WIDTH; ny=ny+1 {
                screen[(ny + 1)*SCREEN_WIDTH + nx] = map[ny * MAP_WIDTH + nx];
            }
        }

        screen[(floor(player.Y) + 1) * SCREEN_WIDTH + floor(player.X)] = "P";

        WriteScreen(screen); // Write buffer to screen
    }
    
    pipe.delete(); // Cleans up pipe
}

if params.len > 0 && params[0] == "--keyServer" {
    runKeyServer();
    exit();
}

main();