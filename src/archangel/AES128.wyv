// Reimplementation of https://github.com/Finko42/GreyHack/blob/main/Symmetric-Encryption/AES/AES128.src
const SBOX = [
    99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,
    54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,
    41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,
    143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,
    238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,
    8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,
    217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22
];

const RCON = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54];

const MULT2 = [
    0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
    92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
    160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
    226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,27,25,31,29,19,17,23,21,11,9,15,13,3,1,7,5,59,57,63,61,51,49,55,53,43,41,
    47,45,35,33,39,37,91,89,95,93,83,81,87,85,75,73,79,77,67,65,71,69,123,121,127,125,115,113,119,117,107,105,111,109,99,97,103,101,155,
    153,159,157,147,145,151,149,139,137,143,141,131,129,135,133,187,185,191,189,179,177,183,181,171,169,175,173,163,161,167,165,219,217,
    223,221,211,209,215,213,203,201,207,205,195,193,199,197,251,249,255,253,243,241,247,245,235,233,239,237,227,225,231,229
];

const ENC_MATRIX = [[2, 3, 1, 1], [1, 2, 3, 1], [1, 1, 2, 3], [3, 1, 1, 2]];
const DEC_MATRIX = [[14, 11, 13, 9], [9, 14, 11, 13], [13, 9, 14, 11], [11, 13, 9, 14]];

const B64_TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

class AES128 {
    private let key: string;

    private let byteKey: number[];
    private let IV: number[];

    public fn AES128(key: string) {
        if key.len != 16
            exit("[AES128] Key isn't 16 bytes");
        
        self.key = key;

        self.byteKey = [];

        foreach let v in key
            self.byteKey.push(v.code);

        self.IV = [];
        foreach let byte in self.byteKey
            self.IV = self.IV + [floor(rnd(byte) * 256)];
    }

    public fn Encrypt(text: string) -> string {
        let key = self.ExpandKey(self.byteKey);

        let blocks: number[][][] = [[]];
        let b = 0;
        foreach let c in text {
            blocks[b] = blocks[b] + [c.code];
            if blocks[b].len == 16 {
                blocks = blocks + [[]];
                b = b+1;
            }
        }

        // Pad with CMS (Cryptographic Message Syntax)
        let padNum = 16 - blocks[-1].len;
        foreach let i in range(padNum-1)
            blocks[-1] = blocks[-1] + [padNum];

        // XOR first block with IV
        foreach let i in self.IV.indexes
            blocks[0][i] = unsafe_cast<number>(blocks[0][i]) ^^ self.IV[i]; // I hate using "unsafe_cast" in these but it's usually always required when converting GreyScript code

        // Format blocks
        foreach let i in blocks.indexes
            blocks[i] = [
                slice(blocks[i], 0, 4),
                slice(blocks[i], 4, 8),
                slice(blocks[i], 8, 12),
                slice(blocks[i], 12, 16)
            ];
        
        
        // Encode blocks
        blocks[0] = self.EncryptBytes(key, blocks[0]);
        if blocks.len > 1 {
            foreach let i in range(1, blocks.len - 1) {
                foreach let column in blocks[i].indexes 
                    foreach let byte in blocks[i][column].indexes
                        blocks[i][column][byte] = blocks[i][column][byte] ^^ blocks[i-1][column][byte];
                
                blocks[i] = self.EncryptBytes(key, blocks[i]);
            }
        }

        // Convert blocks to array of bytes
        let arr: number[] = [];
        foreach let block in blocks
            foreach let column in block
                foreach let byte in column
                    arr = arr + [byte];

        // Convert to base64
        let output = "";
        foreach let i in range(0, arr.len-1, 3) {
            let buffer: number = arr[i]*65536;
            if arr.hasIndex(i+1) {
                buffer = buffer+arr[i+1]*256;
                if arr.hasIndex(i+2)
                    buffer = buffer+arr[i+2];
            }

            if arr.hasIndex(i+2) {
                foreach let j in range(3)
                    output = output + B64_TABLE[floor(buffer/64^j)%64];
            } else {
                if arr.hasIndex(i+1)
                    foreach let j in range(3,1)
                        output = output + B64_TABLE[floor(buffer/64^j)%64];
                else
                    foreach let j in range(3,2)
                        output = output + B64_TABLE[floor(buffer/64^j)%64];
            }
        }

        return output;
    }

    public fn Decrypt(text: string) -> string {
        if text.len % 4 == 1
            return null;
        
        let key = self.ExpandKey(self.byteKey);
        
        // Convert base64 into sextet array
        let s_arr: number[] = [];
        foreach let i in text.indexes {
            let tmp = B64_TABLE.indexOf(text[i]);
            if tmp == null
                return null;
            s_arr.push(tmp);
        }

        // Convert sextets in bytes
        let b_arr: number[] = [];
        foreach let i in range(0, s_arr.len-1, 4) {
            let buffer = s_arr[i]*262144;
            if s_arr.hasIndex(i+1) {
                buffer = buffer+s_arr[i+1]*4096;
                if s_arr.hasIndex(i+2) {
                    buffer = buffer+s_arr[i+2]*64;
                    if s_arr.hasIndex(i+3)
                        buffer = buffer+s_arr[i+3];
                }
            }

            if s_arr.hasIndex(i+3)
                foreach let j in range(2)
                    b_arr = b_arr + [floor(buffer/256^j)%256];
            else {
                if s_arr.hasIndex(i+2) {
                    foreach let j in range(2,1)
                        b_arr = b_arr + [floor(buffer/256^j)%256];
                } else {
                    b_arr = b_arr + [floor(buffer/65526)%256];
                }
            }
        }

        // Convert byte array to blocks
        let blocks: number[][][] = [[]];
        for let b = 0; b_arr.len > 0; blocks[b] = blocks[b] + [b_arr.pull()] {
            if blocks[b].len == 16 {
                blocks = blocks + [[]];
                b=b+1;
            }
        }
        if blocks[-1].len != 16 return null;

        // Format blocks
        foreach let i in blocks.indexes
            blocks[i] = [
                slice(blocks[i], 0, 4),
                slice(blocks[i], 4, 8),
                slice(blocks[i], 8, 12),
                slice(blocks[i], 12, 16)
            ];
        
        print(blocks);

        // Decode blocks
        let newBlocks: number[][][] = slice(blocks, 0);
        foreach let i in blocks.indexes
            newBlocks[i] = self.DecryptBytes(key, blocks[i]);
        
        print(newBlocks);

        // XOR blocks
        foreach let column in blocks[0].indexes
            foreach let byte in blocks[i][column].indexes
                newBlocks[0][column][byte] = newBlocks[0][column][byte] ^^ self.IV[column*4+byte];
        
        if blocks.len > 1
            foreach let i in range(1, blocks.len - 1)
                foreach let column in blocks[i].indexes
                    foreach let byte in blocks[i][column].indexes
                        newBlocks[i][column][byte] = newBlocks[i][column][byte] ^^ blocks[i-1][column][byte];
        
        blocks = slice(newBlocks, 0);

        // Convert blocks to array of bytes
        let arr: number[] = [];
        foreach let block in blocks
            foreach let column in block
                foreach let byte in column
                    arr = arr + [byte];
        
        // Remove padding
        if arr[-1] > 16 || arr[-1] == 0 return null;
        foreach let i in range(arr[-1]-1)
            arr.pop();
        
        // Convert array to text
        let output = "";
        foreach let byte in arr
            output = output + char(byte);
        
        return output;
    }

    fn EncryptBytes(_key: number[][], block: number[][]) -> number[][] {
        let key: number[][] = slice(_key, 0);
        let state: number[][] = slice(block, 0);
        state = self.AddRoundKey(state, key, 0);
        for let round = 1; round <= 9; round = round+1 {
            state = [
                self.SubBytes(state[0]),
                self.SubBytes(state[1]),
                self.SubBytes(state[2]),
                self.SubBytes(state[3])
            ];
            state = self.ShiftRows(state);
            state = self.MixColumns(state);
            state = self.AddRoundKey(state, key, round);
        }

        state = [
            self.SubBytes(state[0]),
            self.SubBytes(state[1]),
            self.SubBytes(state[2]),
            self.SubBytes(state[3])
        ];

        state = self.ShiftRows(state);
        state = self.AddRoundKey(state, key, 10);
        return state;
    }

    fn DecryptBytes(_key: number[][], block: number[][]) -> number[][] {
        let key: number[][] = slice(_key, 0);
        let state: number[][] = slice(block, 0);

        state = self.AddRoundKey(state, key, 10);

        for let i = 9; i >= 1; i = i-1 {
            state = self.InvShiftRows(state);
            state = [
                self.InvSubBytes(state[0]),
                self.InvSubBytes(state[1]),
                self.InvSubBytes(state[2]),
                self.InvSubBytes(state[3])
            ];
            state = self.AddRoundKey(state, key, round);
            state = self.InvMixColumns(state);
        }

        state = self.InvShiftRows(state);
        state = [
            self.InvSubBytes(state[0]),
            self.InvSubBytes(state[1]),
            self.InvSubBytes(state[2]),
            self.InvSubBytes(state[3])
        ];
        state = self.AddRoundKey(state, key, 0);
        return state;
    }

    // Util functions
    fn SubBytes(column: number[]) -> number[] {
        let result: number[] = slice(column, 0);
        foreach let i in result.indexes
            result[i] = SBOX[result[i]];
        return result;
    }

    fn WordXor(word1: number[], word2: number[]) -> number[] {
        let result = [0, 0, 0, 0];
        foreach let i in result.indexes
            result[i] = word1[i] ^^ word2[i];
        return result;
    }

    fn AddRoundKey(state: number[][], key: number[][], roundNum: number) -> number[][] {
        let roundKey: number[][] = slice(key, roundNum*4, roundNum*4+4);
        return [
            self.WordXor(state[0], roundKey[0]),
            self.WordXor(state[1], roundKey[1]),
            self.WordXor(state[2], roundKey[2]),
            self.WordXor(state[3], roundKey[3])
        ];
    }

    fn ExpandKey(key: number[]) -> number[][] {
        let W: number[][] = [
            slice(key, 0, 4),
            slice(key, 4, 8),
            slice(key, 8, 12),
            slice(key, 12, 16)
        ];

        foreach let i in range(4, 40, 4) {
            W = W + [[], [], [], []];
            W[i] = cast<number[][]>(slice(W[i-1], 1)) + [W[i-1][0]]; // RotWord
            W[i] = self.SubBytes(W[i]);
            W[i] = self.WordXor(W[i-4], W[i]);
            W[i][0] = RCON[i/4-1] ^^ W[i][0];

            foreach let j in range(i+1, i+3)
                W[j] = self.WordXor(W[j-4], W[j-1]);
        }

        return W;
    }

    fn ShiftRows(_state: number[][]) -> number[][] {
        let state: number[][] = slice(_state, 0);
        let tmp = state[0][1];
		state[0][1] = state[1][1];
		state[1][1] = state[2][1];
		state[2][1] = state[3][1];
		state[3][1] = tmp;
		
		foreach let i in range(1) {
			tmp = state[0][2];
			state[0][2] = state[1][2];
			state[1][2] = state[2][2];
			state[2][2] = state[3][2];
			state[3][2] = tmp;
        }
		
		tmp = state[3][3];
		state[3][3] = state[2][3];
		state[2][3] = state[1][3];
		state[1][3] = state[0][3];
		state[0][3] = tmp;
		return state;
    }

    fn MixColumns(_state: number[][]) -> number[][] {
        let state: number[][] = slice(_state, 0);
        foreach let column in state.indexes {
            let endColumn = [0, 0, 0, 0];
            foreach let i in ENC_MATRIX.indexes {
                let tmp: number[] = slice(state[column], 0);
                foreach let j in ENC_MATRIX[i].indexes {
                    if ENC_MATRIX[i][j] == 1 continue;
                    tmp[j] = MULT2[state[column][j]];
                    if ENC_MATRIX[i][j] != 3 continue;
                    tmp[j] = bitwise("^", tmp[j], state[column][j]);
                }
                endColumn[i] = bitwise("^", bitwise("^", bitwise("^", tmp[0], tmp[1]), tmp[2]), tmp[3]);
            }
            state[column] = slice(endColumn, 0);
        }
        return state;
    }

    fn InvShiftRows(_state: number[][]) -> number[][] {
        let state: number[][] = slice(_state, 0);
        let tmp = state[3][1];
		state[3][1] = state[2][1];
		state[2][1] = state[1][1];
		state[1][1] = state[0][1];
		state[0][1] = tmp;
		
		foreach let i in range(1) {
			tmp = state[3][2];
			state[3][2] = state[2][2];
			state[2][2] = state[1][2];
			state[1][2] = state[0][2];
			state[0][2] = tmp;
        }
		
		tmp = state[0][3];
		state[0][3] = state[1][3];
		state[1][3] = state[2][3];
		state[2][3] = state[3][3];
		state[3][3] = tmp;
		return state;
    }

    fn InvSubBytes(column: number[]) -> number[] {
        let result: number[] = slice(column, 0);
        foreach let i in result.indexes {
            result[i] = SBOX.indexOf(result[i]);
        }
        return result;
    }

    fn InvMixColumns(_state: number[][]) -> number[][] {
        let state: number[][] = slice(_state, 0);
        foreach let column in state.indexes {
            let endColumn = [0, 0, 0, 0];
            foreach let i in DEC_MATRIX.indexes {
                let tmp: number[] = slice(state[column], 0);
                foreach let j in DEC_MATRIX.indexes {
                    switch DEC_MATRIX[i][j] {
                        case 9:
                            tmp[j] = bitwise("^", MULT2[MULT2[MULT2[state[column][j]]]], state[column][j]);
                            break;
                        
                        case 11:
                            tmp[j] = bitwise("^", MULT2[bitwise("^", MULT2[MULT2[state[column][j]]], state[column][j])], state[column][j]);
                            break;
                        
                        case 13:
                            tmp[j] = bitwise("^", MULT2[MULT2[bitwise("^", MULT2[state[column][j]], state[column][j])]], state[column][j]);
                            break;
                        
                        default:
                            tmp[j] = MULT2[bitwise("^", MULT2[bitwise("^", MULT2[state[column][j]], state[column][j])], state[column][j])];
                            break;
                    }
                }
                endColumn[i] = bitwise("^", bitwise("^", bitwise("^", tmp[0], tmp[1]), tmp[2]), tmp[3]);
            }
            state[column] = slice(endColumn, 0);
        }
        return state;
    }
}

// Test
let r = new AES128("1234567890123456");
// QmVl5GzlXURJolH8RUINEA
print(r.Decrypt(r.Encrypt("hello")));