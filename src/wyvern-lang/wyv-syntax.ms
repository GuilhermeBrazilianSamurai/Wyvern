Wyvern.SyntaxKind = {}

Wyvern.SyntaxKind.NumberToken     = Wyvern.auto()
Wyvern.SyntaxKind.StringToken     = Wyvern.auto()
Wyvern.SyntaxKind.NullKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.WhitespaceToken = Wyvern.auto()

Wyvern.SyntaxKind.OpenParenthesisToken  = Wyvern.auto()
Wyvern.SyntaxKind.CloseParenthesisToken = Wyvern.auto()

Wyvern.SyntaxKind.OpenBraceToken  = Wyvern.auto()
Wyvern.SyntaxKind.CloseBraceToken = Wyvern.auto()

Wyvern.SyntaxKind.OpenBracketToken  = Wyvern.auto()
Wyvern.SyntaxKind.CloseBracketToken = Wyvern.auto()

Wyvern.SyntaxKind.ColonToken     = Wyvern.auto()
Wyvern.SyntaxKind.SemicolonToken = Wyvern.auto()

Wyvern.SyntaxKind.ArrowToken = Wyvern.auto()

Wyvern.SyntaxKind.IdentifierToken = Wyvern.auto()

// Keywords
Wyvern.SyntaxKind.FunctionKeyword   = Wyvern.auto()
Wyvern.SyntaxKind.IfKeyword         = Wyvern.auto()
Wyvern.SyntaxKind.ElseKeyword       = Wyvern.auto()
Wyvern.SyntaxKind.ForKeyword        = Wyvern.auto()
Wyvern.SyntaxKind.ForeachKeyword    = Wyvern.auto()
Wyvern.SyntaxKind.WhileKeyword      = Wyvern.auto()
Wyvern.SyntaxKind.DoKeyword         = Wyvern.auto()
Wyvern.SyntaxKind.ReturnKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.BreakKeyword      = Wyvern.auto()
Wyvern.SyntaxKind.ContinueKeyword   = Wyvern.auto()
Wyvern.SyntaxKind.TrueKeyword       = Wyvern.auto()
Wyvern.SyntaxKind.FalseKeyword      = Wyvern.auto()
Wyvern.SyntaxKind.ClassKeyword      = Wyvern.auto()
Wyvern.SyntaxKind.StructKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.EnumKeyword       = Wyvern.auto()
Wyvern.SyntaxKind.ContractKeyword   = Wyvern.auto()
Wyvern.SyntaxKind.PublicKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.PrivateKeyword    = Wyvern.auto()
Wyvern.SyntaxKind.StaticKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.OverrideKeyword   = Wyvern.auto()
Wyvern.SyntaxKind.VirtualKeyword    = Wyvern.auto()
Wyvern.SyntaxKind.InKeyword         = Wyvern.auto()
Wyvern.SyntaxKind.AsKeyword         = Wyvern.auto()
Wyvern.SyntaxKind.LetKeyword        = Wyvern.auto()
Wyvern.SyntaxKind.VarKeyword        = Wyvern.auto()
Wyvern.SyntaxKind.ConstKeyword      = Wyvern.auto()
Wyvern.SyntaxKind.NewKeyword        = Wyvern.auto()
Wyvern.SyntaxKind.CastKeyword       = Wyvern.auto()
Wyvern.SyntaxKind.UnsafeCastKeyword = Wyvern.auto()
Wyvern.SyntaxKind.ImportKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.MSImportKeyword   = Wyvern.auto()
Wyvern.SyntaxKind.SwitchKeyword     = Wyvern.auto()
Wyvern.SyntaxKind.CaseKeyword       = Wyvern.auto()
Wyvern.SyntaxKind.DefaultKeyword    = Wyvern.auto()
Wyvern.SyntaxKind.IsaKeyword        = Wyvern.auto()

// Operators
Wyvern.SyntaxKind.CommaToken              = Wyvern.auto()
Wyvern.SyntaxKind.DotToken                = Wyvern.auto()
Wyvern.SyntaxKind.PlusToken               = Wyvern.auto()
Wyvern.SyntaxKind.MinusToken              = Wyvern.auto()
Wyvern.SyntaxKind.AsteriskToken           = Wyvern.auto()
Wyvern.SyntaxKind.SlashToken              = Wyvern.auto()
Wyvern.SyntaxKind.PercentToken            = Wyvern.auto()
Wyvern.SyntaxKind.AmpersandToken          = Wyvern.auto()
Wyvern.SyntaxKind.PipeToken               = Wyvern.auto()
Wyvern.SyntaxKind.CaretToken              = Wyvern.auto()
Wyvern.SyntaxKind.CaretCaretToken         = Wyvern.auto()
Wyvern.SyntaxKind.EqualsToken             = Wyvern.auto()
Wyvern.SyntaxKind.EqualsEqualsToken       = Wyvern.auto()
Wyvern.SyntaxKind.BangToken               = Wyvern.auto()
Wyvern.SyntaxKind.TildeToken              = Wyvern.auto()
Wyvern.SyntaxKind.BangEqualsToken         = Wyvern.auto()
Wyvern.SyntaxKind.LessToken               = Wyvern.auto()
Wyvern.SyntaxKind.GreaterToken            = Wyvern.auto()
Wyvern.SyntaxKind.LessEqualToken          = Wyvern.auto()
Wyvern.SyntaxKind.GreaterEqualToken       = Wyvern.auto()
Wyvern.SyntaxKind.AmpersandAmpersandToken = Wyvern.auto()
Wyvern.SyntaxKind.PipePipeToken           = Wyvern.auto()
Wyvern.SyntaxKind.PlusPlusToken           = Wyvern.auto()
Wyvern.SyntaxKind.MinusMinusToken         = Wyvern.auto()
Wyvern.SyntaxKind.PlusEqualsToken         = Wyvern.auto()
Wyvern.SyntaxKind.MinusEqualsToken        = Wyvern.auto()
Wyvern.SyntaxKind.AsteriskEqualsToken     = Wyvern.auto()
Wyvern.SyntaxKind.SlashEqualsToken        = Wyvern.auto()
Wyvern.SyntaxKind.PercentEqualsToken      = Wyvern.auto()
Wyvern.SyntaxKind.CaretEqualsToken        = Wyvern.auto()
Wyvern.SyntaxKind.SignatureToken          = Wyvern.auto()
Wyvern.SyntaxKind.AtToken                 = Wyvern.auto()

Wyvern.SyntaxKind.LessLessToken                  = Wyvern.auto()
Wyvern.SyntaxKind.GreaterGreaterToken            = Wyvern.auto()
Wyvern.SyntaxKind.GreaterGreaterGreaterToken     = Wyvern.auto()

Wyvern.SyntaxKind.UnkownToken       = Wyvern.auto()
Wyvern.SyntaxKind.LineCommentToken  = Wyvern.auto()
Wyvern.SyntaxKind.BlockCommentToken = Wyvern.auto()
Wyvern.SyntaxKind.CommentToken      = Wyvern.auto()
Wyvern.SyntaxKind.EndOfLineToken    = Wyvern.auto()
Wyvern.SyntaxKind.EndOfFileToken    = Wyvern.auto()

// Statements
Wyvern.SyntaxKind.BlockStatement       = Wyvern.auto()
Wyvern.SyntaxKind.ExpressionStatement  = Wyvern.auto()
Wyvern.SyntaxKind.VariableDeclaration  = Wyvern.auto()
Wyvern.SyntaxKind.IfStatement          = Wyvern.auto()
Wyvern.SyntaxKind.SwitchStatement      = Wyvern.auto()
Wyvern.SyntaxKind.WhileStatement       = Wyvern.auto()
Wyvern.SyntaxKind.DoWhileStatement     = Wyvern.auto()
Wyvern.SyntaxKind.ForStatement         = Wyvern.auto()
Wyvern.SyntaxKind.ForeachStatement     = Wyvern.auto()
Wyvern.SyntaxKind.ReturnStatement      = Wyvern.auto()

// Expressions
Wyvern.SyntaxKind.LiteralExpression       = Wyvern.auto()
Wyvern.SyntaxKind.BinaryExpression        = Wyvern.auto()
Wyvern.SyntaxKind.ParenthesizedExpression = Wyvern.auto()
Wyvern.SyntaxKind.UnaryExpression         = Wyvern.auto()
Wyvern.SyntaxKind.AfterUnaryExpression    = Wyvern.auto()
Wyvern.SyntaxKind.NameExpression          = Wyvern.auto()
Wyvern.SyntaxKind.AssignmentExpression    = Wyvern.auto()
Wyvern.SyntaxKind.CallExpression          = Wyvern.auto()
Wyvern.SyntaxKind.NewStructExpression     = Wyvern.auto()
Wyvern.SyntaxKind.BreakStatement          = Wyvern.auto()
Wyvern.SyntaxKind.ContinueStatement       = Wyvern.auto()
Wyvern.SyntaxKind.ArrayExpression         = Wyvern.auto()
Wyvern.SyntaxKind.MapExpression           = Wyvern.auto()
Wyvern.SyntaxKind.IndexExpression         = Wyvern.auto()
Wyvern.SyntaxKind.NamecallExpression      = Wyvern.auto()
Wyvern.SyntaxKind.NewExpression           = Wyvern.auto()
Wyvern.SyntaxKind.CastExpression          = Wyvern.auto()

// Nodes
Wyvern.SyntaxKind.CompilationUnit         = Wyvern.auto()
Wyvern.SyntaxKind.ElseClause              = Wyvern.auto()
Wyvern.SyntaxKind.TypeClause              = Wyvern.auto()
Wyvern.SyntaxKind.MapClause               = Wyvern.auto()
Wyvern.SyntaxKind.ArrayClause             = Wyvern.auto()
Wyvern.SyntaxKind.TypeSignature           = Wyvern.auto()
Wyvern.SyntaxKind.FunctionDeclaration     = Wyvern.auto()
Wyvern.SyntaxKind.ClassDeclaration        = Wyvern.auto()
Wyvern.SyntaxKind.StructDeclaration       = Wyvern.auto()
Wyvern.SyntaxKind.Import                  = Wyvern.auto()
Wyvern.SyntaxKind.MSImport                = Wyvern.auto()
Wyvern.SyntaxKind.ContractDeclaration     = Wyvern.auto()
Wyvern.SyntaxKind.EnumDeclaration         = Wyvern.auto()
Wyvern.SyntaxKind.TypeMember              = Wyvern.auto()
Wyvern.SyntaxKind.GlobalStatement         = Wyvern.auto()
Wyvern.SyntaxKind.Parameter               = Wyvern.auto()
Wyvern.SyntaxKind.PairSyntax              = Wyvern.auto()
Wyvern.SyntaxKind.ExtensionClause         = Wyvern.auto()
Wyvern.SyntaxKind.ContractClause          = Wyvern.auto()
Wyvern.SyntaxKind.Case                    = Wyvern.auto()
Wyvern.SyntaxKind.CaseBodyStatement       = Wyvern.auto()
Wyvern.SyntaxKind.CaseStatement           = Wyvern.auto()
Wyvern.SyntaxKind.DefaultStatement        = Wyvern.auto()
Wyvern.SyntaxKind.StructArgument          = Wyvern.auto()

Wyvern.auto(true)

Wyvern.SyntaxKind.ToString = function(nKind)
    for kvI in Wyvern.SyntaxKind
        if kvI.value == nKind then
            return kvI.key
        end if
    end for

    return "Unkown"
end function

Wyvern.GetTokenType = function(token)
    if token.Kind == Wyvern.SyntaxKind.TrueKeyword or token.Kind == Wyvern.SyntaxKind.FalseKeyword then
        return "bool"
    end if

    return typeof(token.Value)
end function

Wyvern.EVERY_CHAR = "`1234567890-=qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}ASDFGHJKL:""ZXCVBNM<>?~!@#$%^&*()_+|\ " + char(10) + char(0) + char(9)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SyntaxFacts = {}

Wyvern.SyntaxFacts.GetBinaryOperatorPrecedence = function(kind)
    if kind == Wyvern.SyntaxKind.AsteriskToken or kind == Wyvern.SyntaxKind.SlashToken or kind == Wyvern.SyntaxKind.PercentToken or kind == Wyvern.SyntaxKind.CaretToken or kind == Wyvern.SyntaxKind.AmpersandToken or kind == Wyvern.SyntaxKind.CaretCaretToken or kind == Wyvern.SyntaxKind.GreaterGreaterToken or kind == Wyvern.SyntaxKind.LessLessToken or kind == Wyvern.SyntaxKind.GreaterGreaterGreaterToken or kind == Wyvern.SyntaxKind.PipeToken then
        return 5
    end if

    if kind == Wyvern.SyntaxKind.PlusToken or kind == Wyvern.SyntaxKind.MinusToken then
        return 4
    end if

    if kind == Wyvern.SyntaxKind.EqualsEqualsToken or kind == Wyvern.SyntaxKind.BangEqualsToken or kind == Wyvern.SyntaxKind.LessToken or kind == Wyvern.SyntaxKind.LessEqualToken or kind == Wyvern.SyntaxKind.GreaterToken or kind == Wyvern.SyntaxKind.GreaterEqualToken then
        return 3
    end if

    if kind == Wyvern.SyntaxKind.AmpersandAmpersandToken then
        return 2
    end if

    if kind == Wyvern.SyntaxKind.PipePipeToken then
        return 1
    end if

    return 0
end function

Wyvern.SyntaxFacts.GetUnaryOperatorPrecedence = function(kind)
    if kind == Wyvern.SyntaxKind.AtToken then
        return 4
    end if

    if kind == Wyvern.SyntaxKind.MinusToken then
        return 3
    end if

    if kind == Wyvern.SyntaxKind.BangToken then
        return 2
    end if

    if kind == Wyvern.SyntaxKind.TildeToken then
        return 1
    end if

    return 0
end function

Wyvern.SyntaxFacts.GetPostUnaryOperatorPrecedence = function(kind)
    if kind == Wyvern.SyntaxKind.PlusPlusToken or kind == Wyvern.SyntaxKind.MinusMinusToken then
        return 1
    end if

    return 0
end function

Wyvern.SyntaxFacts.WordsToKeywords = {}
Wyvern.SyntaxFacts.WordsToKeywords["fn"]          = Wyvern.SyntaxKind.FunctionKeyword
Wyvern.SyntaxFacts.WordsToKeywords["class"]       = Wyvern.SyntaxKind.ClassKeyword
Wyvern.SyntaxFacts.WordsToKeywords["struct"]      = Wyvern.SyntaxKind.StructKeyword
Wyvern.SyntaxFacts.WordsToKeywords["contract"]    = Wyvern.SyntaxKind.ContractKeyword
Wyvern.SyntaxFacts.WordsToKeywords["import"]      = Wyvern.SyntaxKind.ImportKeyword
Wyvern.SyntaxFacts.WordsToKeywords["msimport"]    = Wyvern.SyntaxKind.MSImportKeyword
Wyvern.SyntaxFacts.WordsToKeywords["enum"]        = Wyvern.SyntaxKind.EnumKeyword
Wyvern.SyntaxFacts.WordsToKeywords["public"]      = Wyvern.SyntaxKind.PublicKeyword
Wyvern.SyntaxFacts.WordsToKeywords["private"]     = Wyvern.SyntaxKind.PrivateKeyword
Wyvern.SyntaxFacts.WordsToKeywords["static"]      = Wyvern.SyntaxKind.StaticKeyword
Wyvern.SyntaxFacts.WordsToKeywords["override"]    = Wyvern.SyntaxKind.OverrideKeyword
Wyvern.SyntaxFacts.WordsToKeywords["virtual"]     = Wyvern.SyntaxKind.VirtualKeyword
Wyvern.SyntaxFacts.WordsToKeywords["if"]          = Wyvern.SyntaxKind.IfKeyword
Wyvern.SyntaxFacts.WordsToKeywords["else"]        = Wyvern.SyntaxKind.ElseKeyword
Wyvern.SyntaxFacts.WordsToKeywords["switch"]      = Wyvern.SyntaxKind.SwitchKeyword
Wyvern.SyntaxFacts.WordsToKeywords["case"]        = Wyvern.SyntaxKind.CaseKeyword
Wyvern.SyntaxFacts.WordsToKeywords["default"]     = Wyvern.SyntaxKind.DefaultKeyword
Wyvern.SyntaxFacts.WordsToKeywords["for"]         = Wyvern.SyntaxKind.ForKeyword
Wyvern.SyntaxFacts.WordsToKeywords["foreach"]     = Wyvern.SyntaxKind.ForeachKeyword
Wyvern.SyntaxFacts.WordsToKeywords["while"]       = Wyvern.SyntaxKind.WhileKeyword
Wyvern.SyntaxFacts.WordsToKeywords["do"]          = Wyvern.SyntaxKind.DoKeyword
Wyvern.SyntaxFacts.WordsToKeywords["return"]      = Wyvern.SyntaxKind.ReturnKeyword
Wyvern.SyntaxFacts.WordsToKeywords["break"]       = Wyvern.SyntaxKind.BreakKeyword
Wyvern.SyntaxFacts.WordsToKeywords["continue"]    = Wyvern.SyntaxKind.ContinueKeyword
Wyvern.SyntaxFacts.WordsToKeywords["true"]        = Wyvern.SyntaxKind.TrueKeyword
Wyvern.SyntaxFacts.WordsToKeywords["false"]       = Wyvern.SyntaxKind.FalseKeyword
Wyvern.SyntaxFacts.WordsToKeywords["in"]          = Wyvern.SyntaxKind.InKeyword
Wyvern.SyntaxFacts.WordsToKeywords["as"]          = Wyvern.SyntaxKind.AsKeyword
Wyvern.SyntaxFacts.WordsToKeywords["null"]        = Wyvern.SyntaxKind.NullKeyword
Wyvern.SyntaxFacts.WordsToKeywords["let"]         = Wyvern.SyntaxKind.LetKeyword
Wyvern.SyntaxFacts.WordsToKeywords["var"]         = Wyvern.SyntaxKind.VarKeyword
Wyvern.SyntaxFacts.WordsToKeywords["const"]       = Wyvern.SyntaxKind.ConstKeyword
Wyvern.SyntaxFacts.WordsToKeywords["new"]         = Wyvern.SyntaxKind.NewKeyword
Wyvern.SyntaxFacts.WordsToKeywords["cast"]        = Wyvern.SyntaxKind.CastKeyword
Wyvern.SyntaxFacts.WordsToKeywords["unsafe_cast"] = Wyvern.SyntaxKind.UnsafeCastKeyword
Wyvern.SyntaxFacts.WordsToKeywords["isa"]         = Wyvern.SyntaxKind.IsaKeyword

Wyvern.SyntaxFacts.GetKeywordKind = function(word)
    if Wyvern.SyntaxFacts.WordsToKeywords.hasIndex(word) then
        return Wyvern.SyntaxFacts.WordsToKeywords[word]
    end if
    return Wyvern.SyntaxKind.IdentifierToken
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SyntaxNode = {"Kind":-1, "Span":-1}

Wyvern.SyntaxNode.Span = function()
    first = self.GetChildren().pull().Span
    last = self.GetChildren().pop().Span
    self.Span = first.Combine(last)//Wyvern.TextSpan.FromBounds(first.Start, last.End)
    return self.Span
end function

Wyvern.SyntaxNode.GetChildren = function()
    children = []
    for k in self
        if k.key == "__isa" then continue
        if typeof(@k.value) == "function" then continue
        if typeof(k.value) == "map" then
            if Wyvern.IsA(Wyvern.SyntaxNode, k.value) then
                children.push(k.value)
            else if Wyvern.IsA(Wyvern.SeperateSyntaxList, k.value) then
                for ke in k.value.GetEnumurator()
                    children.push(ke)
                end for
            end if
        else if typeof(k.value) == "list" then
            for v in k.value
                if Wyvern.IsA(Wyvern.SyntaxNode, v) then
                    children.push(v)
                end if
            end for
        end if
    end for
    return children
end function

Wyvern.SyntaxNode.SyntaxTree = function()
    return self.GetChildren().pop().SyntaxTree
end function

Wyvern.SyntaxNode.Location = function()
    return Wyvern.TextLocation.New(self.SyntaxTree.Text, self.Span)
end function

Wyvern.SyntaxNode.PrettyPrint = function(node, indent="", out=null, isConsole=false)
    buf = []
    buf.push(indent)

    if isConsole then
        color = "#00FFFF"
        if Wyvern.IsA(Wyvern.SyntaxToken, node) then
            color = "#0000FF"
        end if

        buf.push("<color=" + color + ">" + Wyvern.SyntaxKind.ToString(node.Kind) + "</color>")
    else
        buf.push(Wyvern.SyntaxKind.ToString(node.Kind))
    end if
    
    if Wyvern.IsA(Wyvern.SyntaxToken, node) then
        if node.Value != null then
            buf.push(" ")
            if isConsole then
                buf.push("<color=#FF00FF>" + str(node.Value) + "</color>")
            else
                buf.push(str(node.Value))
            end if
        else if node.Kind == Wyvern.SyntaxKind.IdentifierToken and node.Text != null then
            buf.push(" ")
            if isConsole then
                buf.push("<color=#FF00FF>" + node.Text + "</color>")
            else
                buf.push(node.Text)
            end if
        end if
    end if

    if out != null then
        out.push(buf.join(""))
    end if

    indent = indent + "    "

    for child in node.GetChildren()
        self.PrettyPrint(child, indent, out, isConsole)
    end for
end function

Wyvern.SyntaxNode.WriteTo = function(out, isConsole=false)
    self.PrettyPrint(self, "", out, isConsole)
end function

Wyvern.SyntaxNode.ToString = function(isConsole=false)
    out = []
    self.WriteTo(out, isConsole)
    return out.join("\n")
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CompilationUnitSyntax = new Wyvern.SyntaxNode + {"Members":-1, "EndOfFileToken":-1}

Wyvern.CompilationUnitSyntax.Init = function(members, endOfFileToken)
    self.Members = members
    self.EndOfFileToken = endOfFileToken
    self.Kind = Wyvern.SyntaxKind.CompilationUnit
end function

Wyvern.CompilationUnitSyntax.New = function(members, endOfFileToken)
    newInstance = new Wyvern.CompilationUnitSyntax
    newInstance.Init(members, endOfFileToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.MemberSyntax = new Wyvern.SyntaxNode

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.GlobalStatementSyntax = new Wyvern.MemberSyntax + {"Statement":-1}

Wyvern.GlobalStatementSyntax.Init = function(statement)
    self.Statement = statement
    self.Kind = Wyvern.SyntaxKind.GlobalStatement
end function

Wyvern.GlobalStatementSyntax.New = function(statement)
    newInstance = new Wyvern.GlobalStatementSyntax
    newInstance.Init(statement)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ParameterSyntax = new Wyvern.SyntaxNode + {"Identifier":-1, "Type":-1, "EqualsToken":-1, "Initializer":-1}

Wyvern.ParameterSyntax.Init = function(identifier, type, equalsToken=null, initializer=null)
    self.Identifier = identifier
    self.Type = type
    self.EqualsToken = equalsToken
    self.Initializer = initializer
    self.Kind = Wyvern.SyntaxKind.Parameter
end function

Wyvern.ParameterSyntax.New = function(identifier, type, equalsToken=null, initializer=null)
    newInstance = new Wyvern.ParameterSyntax
    newInstance.Init(identifier, type, equalsToken, initializer)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.FunctionDeclarationSyntax = new Wyvern.MemberSyntax + {"FunctionKeyword":-1, "Identifier":-1, "OpenParenthesis":-1, "Parameters":-1, "CloseParenthesis":-1, "TypeClause":-1, "Body":-1}

Wyvern.FunctionDeclarationSyntax.Init = function(functionKeyword, identifier, openParenthesis, parameters, closeParenthesis, typeClause, body)
    self.FunctionKeyword = functionKeyword
    self.Identifier = identifier
    self.OpenParenthesis = openParenthesis
    self.Parameters = parameters
    self.CloseParenthesis = closeParenthesis
    self.TypeClause = typeClause
    self.Body = body
    self.Kind = Wyvern.SyntaxKind.FunctionDeclaration
end function

Wyvern.FunctionDeclarationSyntax.New = function(functionKeyword, identifier, openParenthesis, parameters, closeParenthesis, typeClause, body)
    newInstance = new Wyvern.FunctionDeclarationSyntax
    newInstance.Init(functionKeyword, identifier, openParenthesis, parameters, closeParenthesis, typeClause, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ClassDeclarationSyntax = new Wyvern.MemberSyntax + {"ClassKeyword":-1, "Identifier":-1, "ExtensionClause":-1, "ContractClause":-1, "OpenBrace":-1, "Members":-1, "CloseBrace":-1}

Wyvern.ClassDeclarationSyntax.Init = function(classKeyword, identifier, extensionClause, contractClause, openBrace, members, closeBrace)
    self.ClassKeyword = classKeyword
    self.Identifier = identifier
    self.ExtensionClause = extensionClause
    self.ContractClause = contractClause
    self.OpenBrace = openBrace
    self.Members = members
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.ClassDeclaration
end function

Wyvern.ClassDeclarationSyntax.New = function(classKeyword, identifier, extensionClause, contractClause, openBrace, members, closeBrace)
    newInstance = new Wyvern.ClassDeclarationSyntax
    newInstance.Init(classKeyword, identifier, extensionClause, contractClause, openBrace, members, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.StructDeclarationSyntax = new Wyvern.MemberSyntax + {"StructKeyword":-1, "Identifier":-1, "OpenBrace":-1, "Members":-1, "CloseBrace":-1}

Wyvern.StructDeclarationSyntax.Init = function(structKeyword, identifier, openBrace, members, closeBrace)
    self.StructKeywird = structKeyword
    self.Identifier = identifier
    self.OpenBrace = openBrace
    self.Members = members
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.StructDeclaration
end function

Wyvern.StructDeclarationSyntax.New = function(structKeyword, identifier, openBrace, members, closeBrace)
    newInstance = new Wyvern.StructDeclarationSyntax
    newInstance.Init(structKeyword, identifier, openBrace, members, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ImportSyntax = new Wyvern.SyntaxNode + {"ImportKeyword":-1, "StringPath":-1, "Semicolon":-1, "File":-1, "ImportTree":-1}

Wyvern.ImportSyntax.Init = function(importKeyword, stringPath, semicolon, file, importTree)
    self.ImportKeyword = importKeyword
    self.StringPath = stringPath
    self.Semicolon = semicolon
    self.ImportTree = importTree
    self.File = file

    self.Kind = Wyvern.SyntaxKind.Import
end function

Wyvern.ImportSyntax.New = function(importKeyword, stringPath, semicolon, file, importTree)
    newInstance = new Wyvern.ImportSyntax
    newInstance.Init(importKeyword, stringPath, semicolon, file, importTree)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.MSImportSyntax = new Wyvern.MemberSyntax + {"MSImportKeyword":-1, "StringPath":-1, "OpenBrace":-1, "Members":-1, "CloseBrace":-1}

Wyvern.MSImportSyntax.Init = function(msImportKeyword, stringPath, openBrace, members, closeBrace)
    self.MSImportKeyword = msImportKeyword
    self.StringPath = stringPath
    self.OpenBrace = openBrace
    self.Members = members
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.MSImport
end function

Wyvern.MSImportSyntax.New = function(msImportKeyword, stringPath, openBrace, members, closeBrace)
    newInstance = new Wyvern.MSImportSyntax
    newInstance.Init(msImportKeyword, stringPath, openBrace, members, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.EnumDeclarationSyntax = new Wyvern.MemberSyntax + {"EnumKeyword":-1, "Identifier":-1, "OpenBrace":-1, "Members":-1, "CloseBrace":-1}

Wyvern.EnumDeclarationSyntax.Init = function(enumKeyword, identifier, openBrace, members, closeBrace)
    self.EnumKeyword = enumKeyword
    self.Identifier = identifier
    self.OpenBrace = openBrace
    self.Members = members
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.EnumDeclaration
end function

Wyvern.EnumDeclarationSyntax.New = function(enumKeyword, identifier, openBrace, members, closeBrace)
    newInstance = new Wyvern.EnumDeclarationSyntax
    newInstance.Init(enumKeyword, identifier, openBrace, members, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ContractDeclarationSyntax = new Wyvern.MemberSyntax + {"ContractKeyword":-1, "Identifier":-1, "ContractClause":-1, "OpenBrace":-1, "Members":-1, "CloseBrace":-1}

Wyvern.ContractDeclarationSyntax.Init = function(contractKeyword, identifier, contractClause, openBrace, members, closeBrace)
    self.ContractKeyword = contractKeyword
    self.Identifier = identifier
    self.ContractClause = contractClause
    self.OpenBrace = openBrace
    self.Members = members
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.ContractDeclaration
end function

Wyvern.ContractDeclarationSyntax.New = function(contractKeyword, identifier, contractClause, openBrace, members, closeBrace)
    newInstance = new Wyvern.ContractDeclarationSyntax
    newInstance.Init(contractKeyword, identifier, contractClause, openBrace, members, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.TypeMemberSyntax = new Wyvern.SyntaxNode + {"Modifiers":-1, "Declaration":-1}

Wyvern.TypeMemberSyntax.Init = function(modifiers, declaration)
    self.Modifiers = modifiers
    self.Declaration = declaration
    self.Kind = Wyvern.SyntaxKind.TypeMember
end function

Wyvern.TypeMemberSyntax.New = function(modifiers, declaration)
    newInstance = new Wyvern.TypeMemberSyntax
    newInstance.Init(modifiers, declaration)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ExtensionClauseSyntax = new Wyvern.SyntaxNode + {"Colon":-1, "Identifier":-1}

Wyvern.ExtensionClauseSyntax.Init = function(colon, identifier)
    self.Colon = colon
    self.Identifier = identifier
    self.Kind = Wyvern.SyntaxKind.ExtensionClause
end function

Wyvern.ExtensionClauseSyntax.New = function(colon, identifier)
    newInstance = new Wyvern.ExtensionClauseSyntax
    newInstance.Init(colon, identifier)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ContractClauseSyntax = new Wyvern.SyntaxNode + {"Signature":-1, "Contracts":-1}

Wyvern.ContractClauseSyntax.Init = function(signature, contracts)
    self.Signature = signature
    self.Contracts = contracts
    self.Kind = Wyvern.SyntaxKind.ContractClause
end function

Wyvern.ContractClauseSyntax.New = function(signature, contracts)
    newInstance = new Wyvern.ContractClauseSyntax
    newInstance.Init(signature, contracts)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.StatementSyntax = new Wyvern.SyntaxNode

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.BlockStatementSyntax = new Wyvern.StatementSyntax + {"OpenBraceToken":-1, "Statements":[], "CloseBraceToken":-1}

Wyvern.BlockStatementSyntax.Init = function(openBraceToken, statements, closeBraceToken)
    self.OpenBraceToken = openBraceToken
    self.Statements = statements
    self.CloseBraceToken = closeBraceToken
    self.Kind = Wyvern.SyntaxKind.BlockStatement
end function

Wyvern.BlockStatementSyntax.New = function(openBraceToken, statements, closeBraceToken)
    newInstance = new Wyvern.BlockStatementSyntax
    newInstance.Init(openBraceToken, statements, closeBraceToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ReturnStatementSyntax = new Wyvern.StatementSyntax + {"ReturnKeyword":-1, "Expression":-1, "SemicolonToken":-1}

Wyvern.ReturnStatementSyntax.Init = function(returnKeyword, expression, semicolonToken)
    self.ReturnKeyword = returnKeyword
    self.Expression = expression
    self.SemicolonToken = semicolonToken
    self.Kind = Wyvern.SyntaxKind.ReturnStatement
end function

Wyvern.ReturnStatementSyntax.New = function(returnKeyword, expression, semicolonToken)
    newInstance = new Wyvern.ReturnStatementSyntax
    newInstance.Init(returnKeyword, expression, semicolonToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.IfStatementSyntax = new Wyvern.StatementSyntax + {"IfKeyword":-1, "Condition":-1, "ThenStatement":-1, "ElseClause":-1}

Wyvern.IfStatementSyntax.Init = function(ifKeyword, condition, thenStatement, elseClause)
    self.IfKeyword = ifKeyword
    self.Condition = condition
    self.ThenStatement = thenStatement
    self.ElseClause = elseClause
    self.Kind = Wyvern.SyntaxKind.IfStatement
end function

Wyvern.IfStatementSyntax.New = function(ifKeyword, condition, thenStatement, elseClause)
    newInstance = new Wyvern.IfStatementSyntax
    newInstance.Init(ifKeyword, condition, thenStatement, elseClause)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ElseClauseSyntax = new Wyvern.SyntaxNode + {"ElseKeyword":-1, "ElseStatement":-1}

Wyvern.ElseClauseSyntax.Init = function(elseKeyword, elseStatement)
    self.ElseKeyword = elseKeyword
    self.ElseStatement = elseStatement
    self.Kind = Wyvern.SyntaxKind.ElseClause
end function

Wyvern.ElseClauseSyntax.New = function(elseKeyword, elseStatement)
    newInstance = new Wyvern.ElseClauseSyntax
    newInstance.Init(elseKeyword, elseStatement)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SwitchStatementSyntax = new Wyvern.StatementSyntax + {"SwitchKeyword":-1, "Expression":-1, "OpenBrace":-1, "Cases":-1, "CloseBrace":-1}

Wyvern.SwitchStatementSyntax.Init = function(switchKeyword, expression, openBrace, cases, closeBrace)
    self.SwitchKeyword = switchKeyword
    self.Expression = expression
    self.OpenBrace = openBrace
    self.Cases = cases
    self.CloseBrace = closeBrace
    self.Kind = Wyvern.SyntaxKind.SwitchStatement
end function

Wyvern.SwitchStatementSyntax.New = function(switchKeyword, expression, openBrace, cases, closeBrace)
    newInstance = new Wyvern.SwitchStatementSyntax
    newInstance.Init(switchKeyword, expression, openBrace, cases, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CaseStatementSyntax = new Wyvern.StatementSyntax + {"Cases":-1, "Body":-1}

Wyvern.CaseStatementSyntax.Init = function(cases, body)
    self.Cases = cases
    self.Body = body

    self.Kind = Wyvern.SyntaxKind.CaseStatement
end function

Wyvern.CaseStatementSyntax.New = function(cases, body)
    newInstance = new Wyvern.CaseStatementSyntax
    newInstance.Init(cases, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.DefaultStatementSyntax = new Wyvern.StatementSyntax + {"DefaultKeyword":-1, "Colon":-1, "Body":-1}

Wyvern.DefaultStatementSyntax.Init = function(defaultKeyword, colon, body)
    self.DefaultKeyword = defaultKeyword
    self.Colon = colon
    self.Body = body

    self.Kind = Wyvern.SyntaxKind.DefaultStatement
end function

Wyvern.DefaultStatementSyntax.New = function(defaultKeyword, colon, body)
    newInstance = new Wyvern.DefaultStatementSyntax
    newInstance.Init(defaultKeyword, colon, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CaseSyntax = new Wyvern.SyntaxNode + {"CaseKeyword":-1, "Expression":-1, "Colon":-1}

Wyvern.CaseSyntax.Init = function(caseKeyword, expression, colon)
    self.CaseKeyword = caseKeyword
    self.Expression = expression
    self.Colon = colon

    self.Kind = Wyvern.SyntaxKind.Case
end function

Wyvern.CaseSyntax.New = function(caseKeyword, expression, colon)
    newInstance = new Wyvern.CaseSyntax
    newInstance.Init(caseKeyword, expression, colon)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CaseBodyStatementSyntax = new Wyvern.StatementSyntax + {"Statements":-1, "BreakStatement":-1}

Wyvern.CaseBodyStatementSyntax.Init = function(statements, breakStatement)
    self.Statements = statements
    self.BreakStatement = breakStatement

    self.Kind = Wyvern.SyntaxKind.CaseBodyStatement
end function

Wyvern.CaseBodyStatementSyntax.New = function(statements, breakStatement)
    newInstance = new Wyvern.CaseBodyStatementSyntax
    newInstance.Init(statements, breakStatement)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.WhileStatementSyntax = new Wyvern.StatementSyntax + {"WhileKeyword":-1, "Condition":-1, "Body":-1}

Wyvern.WhileStatementSyntax.Init = function(whileKeyword, condition, body)
    self.WhileKeyword = whileKeyword
    self.Condition = condition
    self.Body = body
    self.Kind = Wyvern.SyntaxKind.WhileStatement
end function

Wyvern.WhileStatementSyntax.New = function(whileKeyword, condition, body)
    newInstance = new Wyvern.WhileStatementSyntax
    newInstance.Init(whileKeyword, condition, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.DoWhileStatementSyntax = new Wyvern.StatementSyntax + {"DoKeyword":-1, "Body":-1, "WhileKeyword":-1, "Condition":-1, "Semicolon":-1}

Wyvern.DoWhileStatementSyntax.Init = function(doKeyword, body, whileKeyword, condition, semicolon)
    self.DoKeyword = doKeyword
    self.Body = body
    self.WhileKeyword = whileKeyword
    self.Condition = condition
    self.Semicolon = semicolon

    self.Kind = Wyvern.SyntaxKind.DoWhileStatement
end function

Wyvern.DoWhileStatementSyntax.New = function(doKeyword, body, whileKeyword, condition, semicolon)
    newInstance = new Wyvern.DoWhileStatementSyntax
    newInstance.Init(doKeyword, body, whileKeyword, condition, semicolon)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ForStatementSyntax = new Wyvern.StatementSyntax + {"ForKeyword":-1, "OpenParenthesis":-1, "Pre":-1, "Condition":-1, "Post":-1, "CloseParenthesis":-1, "Body":-1}

Wyvern.ForStatementSyntax.Init = function(forKeyword, openParenthesis, pre, condition, post, closeParenthesis, body)
    self.ForKeyword = forKeyword
    self.OpenParenthesis = openParenthesis
    self.Pre = pre
    self.Condition = condition
    self.Post = post
    self.CloseParenthesis = closeParenthesis
    self.Body = body

    self.Kind = Wyvern.SyntaxKind.ForStatement
end function

Wyvern.ForStatementSyntax.New = function(forKeyword, openParenthesis, pre, condition, post, closeParenthesis, body)
    newInstance = new Wyvern.ForStatementSyntax
    newInstance.Init(forKeyword, openParenthesis, pre, condition, post, closeParenthesis, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ForeachStatementSyntax = new Wyvern.StatementSyntax + {"ForeachKeyword":-1, "OpenParenthesis":-1, "VKeyword":-1, "Identifier":-1, "TypeClause":-1, "In":-1, "Iterator":-1, "CloseParenthesis":-1, "Body":-1}

Wyvern.ForeachStatementSyntax.Init = function(foreachKeyword, openParenthesis, vKeyword, identifier, typeClause, inK, iterator, closeParenthesis, body)
    self.ForeachKeyword = foreachKeyword
    self.OpenParenthesis = openParenthesis
    self.VKeyword = vKeyword
    self.Identifier = identifier
    self.TypeClause = typeClause
    self.In = inK
    self.Iterator = iterator
    self.CloseParenthesis = closeParenthesis
    self.Body = body

    self.Kind = Wyvern.SyntaxKind.ForeachStatement
end function

Wyvern.ForeachStatementSyntax.New = function(foreachKeyword, openParenthesis, vKeyword, identifier, typeClause, inK, iterator, closeParenthesis, body)
    newInstance = new Wyvern.ForeachStatementSyntax
    newInstance.Init(foreachKeyword, openParenthesis, vKeyword, identifier, typeClause, inK, iterator, closeParenthesis, body)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.BreakStatementSyntax = new Wyvern.StatementSyntax + {"BreakKeyword":-1, "SemicolonToken":-1}

Wyvern.BreakStatementSyntax.Init = function(breakKeyword, semicolonToken)
    self.BreakKeyword = breakKeyword
    self.SemicolonToken = semicolonToken
    self.Kind = Wyvern.SyntaxKind.BreakStatement
end function

Wyvern.BreakStatementSyntax.New = function(breakKeyword, semicolonToken)
    newInstance = new Wyvern.BreakStatementSyntax
    newInstance.Init(breakKeyword, semicolonToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ContinueStatementSyntax = new Wyvern.StatementSyntax + {"ContinueKeyword":-1, "SemicolonToken":-1}

Wyvern.ContinueStatementSyntax.Init = function(continueKeyword, semicolonToken)
    self.ContinueKeyword = continueKeyword
    self.SemicolonToken = semicolonToken
    self.Kind = Wyvern.SyntaxKind.ContinueStatement
end function

Wyvern.ContinueStatementSyntax.New = function(continueKeyword, semicolonToken)
    newInstance = new Wyvern.ContinueStatementSyntax
    newInstance.Init(continueKeyword, semicolonToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.VariableDeclarationSyntax = new Wyvern.StatementSyntax + {"Keyword":-1, "Identifier":-1, "TypeClause":-1, "EqualsToken":-1, "Initializer":-1, "SemicolonToken":-1}

Wyvern.VariableDeclarationSyntax.Init = function(keyword, identifier, typeClause, equalsToken, initializer, semicolonToken)
    self.Keyword = keyword
    self.Identifier = identifier
    self.TypeClause = typeClause
    self.EqualsToken = equalsToken
    self.Initializer = initializer
    self.SemicolonToken = semicolonToken

    self.Kind = Wyvern.SyntaxKind.VariableDeclaration
end function

Wyvern.VariableDeclarationSyntax.New = function(keyword, identifier, typeClause, equalsToken, initializer, semicolonToken)
    newInstance = new Wyvern.VariableDeclarationSyntax
    newInstance.Init(keyword, identifier, typeClause, equalsToken, initializer, semicolonToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.MapClauseSyntax = new Wyvern.SyntaxNode + {"LeftOperator":-1, "Signature":-1, "RightOperator":-1}

Wyvern.MapClauseSyntax.Init = function(leftOperator, signature, rightOperator)
    self.LeftOperator = leftOperator
    self.Signature = signature
    self.RightOperator = rightOperator

    self.Kind = Wyvern.SyntaxKind.MapClause
end function

Wyvern.MapClauseSyntax.New = function(leftOperator, signature, rightOperator)
    newInstance = new Wyvern.MapClauseSyntax
    newInstance.Init(leftOperator, signature, rightOperator)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ArrayClauseSyntax = new Wyvern.SyntaxNode + {"LeftBracket":-1, "RightBracket":-1}

Wyvern.ArrayClauseSyntax.Init = function(leftBracket, rightBracket)
    self.LeftOperator = leftBracket
    self.RightBracket = rightBracket

    self.Kind = Wyvern.SyntaxKind.ArrayClause
end function

Wyvern.ArrayClauseSyntax.New = function(leftBracket, rightBracket)
    newInstance = new Wyvern.ArrayClauseSyntax
    newInstance.Init(leftBracket, rightBracket)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.TypeSignatureSyntax = new Wyvern.SyntaxNode + {"Identifier":-1, "MapClause":-1, "ArrayClauses":-1}

Wyvern.TypeSignatureSyntax.Init = function(identifier, mapClause=null, arrayClauses=null)
    self.Identifier = identifier
    self.MapClause = mapClause
    self.ArrayClauses = arrayClauses

    self.Kind = Wyvern.SyntaxKind.TypeSignature
end function

Wyvern.TypeSignatureSyntax.New = function(identifier, mapClause=null, arrayClauses=null)
    newInstance = new Wyvern.TypeSignatureSyntax
    newInstance.Init(identifier, mapClause, arrayClauses)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.TypeClauseSyntax = new Wyvern.SyntaxNode + {"AssignOperator":-1, "TypeSignature":-1}

Wyvern.TypeClauseSyntax.Init = function(assignOperator, typeSignature)
    self.AssignOperator = assignOperator
    self.TypeSignature = typeSignature

    self.Kind = Wyvern.SyntaxKind.TypeClause
end function

Wyvern.TypeClauseSyntax.New = function(assignOperator, typeSignature)
    newInstance = new Wyvern.TypeClauseSyntax
    newInstance.Init(assignOperator, typeSignature)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ExpressionStatementSyntax = new Wyvern.StatementSyntax + {"Expression":-1, "SemicolonToken":-1}

Wyvern.ExpressionStatementSyntax.Init = function(expression, semicolonToken)
    self.Expression = expression
    self.SemicolonToken = semicolonToken
    self.Kind = Wyvern.SyntaxKind.ExpressionStatement
end function

Wyvern.ExpressionStatementSyntax.New = function(expression, semicolonToken)
    newInstance = new Wyvern.ExpressionStatementSyntax
    newInstance.Init(expression, semicolonToken)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SyntaxToken = new Wyvern.SyntaxNode + {"Text":"", "Start":0, "Value":0, "IsMissing":false}

Wyvern.SyntaxToken.Init = function(syntaxTree, kind, start, text, value=null)
    self.SyntaxTree = syntaxTree
    self.Text = text
    self.Start = start
    self.Kind = kind
    self.Value = value
    self.IsMissing = text == null
    if not self.IsMissing then
        self.IsMissing = text.trim() == null
    end if

    if not self.IsMissing then
        self.Span = Wyvern.TextSpan.New(start, text.len)
    else
        self.Span = Wyvern.TextSpan.New(start, 0)
    end if
end function

Wyvern.SyntaxToken.New = function(syntaxTree, kind, start, text, value=null)
    newInstance = new Wyvern.SyntaxToken
    newInstance.Init(syntaxTree, kind, start, text, value)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer = {"SyntaxTree":-1, "Text":"", "Position":0, "Diagnostics":[], "Value":-1}

Wyvern.Lexer.Init = function(syntaxTree)
    self.SyntaxTree = syntaxTree
    self.Text = syntaxTree.Text
    self.Position = 0
    self.Diagnostics = Wyvern.DiagnosticBag.New()
    self.Value = null
end function

Wyvern.Lexer.New = function(syntaxTree)
    newInstance = new Wyvern.Lexer
    newInstance.Init(syntaxTree)
    return newInstance
end function

Wyvern.Lexer.IsAtEnd = function()
    return self.Position >= self.Text.len
end function

Wyvern.Lexer.Next = function(steps=1)
    indx = self.Position + steps
    c = self.Current()
    if indx < self.Text.len then
        self.Position = indx
    end if
    return c
end function

Wyvern.Lexer.Substring = function(start, endS=null)
    if endS == null then
        endS = start + 1
    end if

    return self.Text.ToString(start, endS - start)
end function

Wyvern.Lexer.Peek = function(offset)
    index = self.Position + offset
    if index >= self.Text.Length then return char(0)
    return self.Substring(index)
end function

Wyvern.Lexer.Current = function()
    return self.Peek(0)
end function

/////////////////////////////// START STATE HANDLING ///////////////////////////////
Wyvern.ApplyString = function(map, s, val)
    for c in s
        if not map.hasIndex(c) then
            map[c] = val
        end if
    end for
end function

Wyvern.Lexer.States = {}
Wyvern.Lexer.States.Start = Wyvern.auto()

Wyvern.Lexer.States.Identifier = Wyvern.auto()
Wyvern.Lexer.States.Number = Wyvern.auto()
Wyvern.Lexer.States.Float = Wyvern.auto()

Wyvern.Lexer.States.String = Wyvern.auto()
Wyvern.Lexer.States.EscapeChar = Wyvern.auto()

Wyvern.Lexer.States.EndOfLine = Wyvern.auto()
Wyvern.Lexer.States.Whitespace = Wyvern.auto()

Wyvern.Lexer.States.Plus = Wyvern.auto()
Wyvern.Lexer.States.Minus = Wyvern.auto()
Wyvern.Lexer.States.Asterisk = Wyvern.auto()
Wyvern.Lexer.States.Slash = Wyvern.auto()
Wyvern.Lexer.States.Percent = Wyvern.auto()
Wyvern.Lexer.States.Caret = Wyvern.auto()

Wyvern.Lexer.States.Greater = Wyvern.auto()
Wyvern.Lexer.States.Less = Wyvern.auto()

Wyvern.Lexer.States.Equals = Wyvern.auto()

Wyvern.Lexer.States.Bang = Wyvern.auto()

Wyvern.Lexer.States.Ampersand = Wyvern.auto()

Wyvern.Lexer.States.Pipe = Wyvern.auto()

Wyvern.Lexer.States.LineComment = Wyvern.auto()
Wyvern.Lexer.States.BlockComment = Wyvern.auto()
Wyvern.Lexer.States.BlockCommentStar = Wyvern.auto()
Wyvern.Lexer.States.GreaterGreater = Wyvern.auto()

Wyvern.Lexer.States.At = Wyvern.auto()

// Everything after End is well the end of every token
Wyvern.Lexer.States.End = Wyvern.auto()
Wyvern.Lexer.States.Unkown = Wyvern.auto()
Wyvern.Lexer.States.EndOfLine = Wyvern.auto()
Wyvern.Lexer.States.EndOfFile = Wyvern.auto()
Wyvern.Lexer.States.EndString = Wyvern.auto()

Wyvern.Lexer.States.EndBlockComment = Wyvern.auto()

Wyvern.Lexer.States.Comma = Wyvern.auto()
Wyvern.Lexer.States.Dot = Wyvern.auto()
Wyvern.Lexer.States.Colon = Wyvern.auto()

Wyvern.Lexer.States.Semicolon = Wyvern.auto()
Wyvern.Lexer.States.Signature = Wyvern.auto()

Wyvern.Lexer.States.OpenBrace = Wyvern.auto()
Wyvern.Lexer.States.CloseBrace = Wyvern.auto()

Wyvern.Lexer.States.OpenBracket = Wyvern.auto()
Wyvern.Lexer.States.CloseBracket = Wyvern.auto()

Wyvern.Lexer.States.OpenParenthesis = Wyvern.auto()
Wyvern.Lexer.States.CloseParenthesis = Wyvern.auto()

Wyvern.Lexer.States.PlusPlus = Wyvern.auto()
Wyvern.Lexer.States.PlusEquals = Wyvern.auto()

Wyvern.Lexer.States.MinusMinus = Wyvern.auto()
Wyvern.Lexer.States.MinusEquals = Wyvern.auto()

Wyvern.Lexer.States.Arrow = Wyvern.auto()

Wyvern.Lexer.States.StarEquals = Wyvern.auto()
Wyvern.Lexer.States.SlashEquals = Wyvern.auto()
Wyvern.Lexer.States.PercentEquals = Wyvern.auto()

Wyvern.Lexer.States.CaretEquals = Wyvern.auto()
Wyvern.Lexer.States.CaretCaret = Wyvern.auto()

Wyvern.Lexer.States.PipePipe = Wyvern.auto()
Wyvern.Lexer.States.AmpersandAmpersand = Wyvern.auto()

Wyvern.Lexer.States.LessLess = Wyvern.auto()

Wyvern.Lexer.States.BangEquals = Wyvern.auto()
Wyvern.Lexer.States.EqualsEquals = Wyvern.auto()

Wyvern.Lexer.States.GreaterEquals = Wyvern.auto()
Wyvern.Lexer.States.LessEquals = Wyvern.auto()

Wyvern.Lexer.States.GreaterGreaterGreater = Wyvern.auto()
Wyvern.Lexer.States.Tilde = Wyvern.auto()

// Everything after this End will set the position back by 1
Wyvern.Lexer.States.EndStepBack = Wyvern.auto()
Wyvern.Lexer.States.EndPipe = Wyvern.auto()
Wyvern.Lexer.States.EndAmpersand = Wyvern.auto()
Wyvern.Lexer.States.EndNumber = Wyvern.auto()
Wyvern.Lexer.States.EndIdentifier = Wyvern.auto()
Wyvern.Lexer.States.EndWhitespace = Wyvern.auto()
Wyvern.Lexer.States.EndPlus = Wyvern.auto()
Wyvern.Lexer.States.EndMinus = Wyvern.auto()
Wyvern.Lexer.States.EndAt = Wyvern.auto()
Wyvern.Lexer.States.EndAsterisk = Wyvern.auto()
Wyvern.Lexer.States.EndSlash = Wyvern.auto()
Wyvern.Lexer.States.EndPercent = Wyvern.auto()
Wyvern.Lexer.States.EndCaret = Wyvern.auto()
Wyvern.Lexer.States.EndEquals = Wyvern.auto()
Wyvern.Lexer.States.EndGreater = Wyvern.auto()
Wyvern.Lexer.States.EndLess = Wyvern.auto()
Wyvern.Lexer.States.EndGreaterGreater = Wyvern.auto()
Wyvern.Lexer.States.EndBang = Wyvern.auto()
Wyvern.Lexer.States.EndLineComment = Wyvern.auto()

Wyvern.auto(true)

/////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__StartTransitions = {}
Wyvern.Lexer.__StartTransitions[char(0)] = Wyvern.Lexer.States.EndOfFile
Wyvern.Lexer.__StartTransitions[" "] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__StartTransitions[char(9) ] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__StartTransitions[char(11)] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__StartTransitions[char(12)] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__StartTransitions[char(13)] = Wyvern.Lexer.States.Whitespace

Wyvern.Lexer.__StartTransitions[""""] = Wyvern.Lexer.States.String
Wyvern.Lexer.__StartTransitions[","] = Wyvern.Lexer.States.Comma
Wyvern.Lexer.__StartTransitions[":"] = Wyvern.Lexer.States.Colon
Wyvern.Lexer.__StartTransitions[";"] = Wyvern.Lexer.States.Semicolon
Wyvern.Lexer.__StartTransitions["$"] = Wyvern.Lexer.States.Signature
Wyvern.Lexer.__StartTransitions["{"] = Wyvern.Lexer.States.OpenBrace
Wyvern.Lexer.__StartTransitions["}"] = Wyvern.Lexer.States.CloseBrace
Wyvern.Lexer.__StartTransitions["["] = Wyvern.Lexer.States.OpenBracket
Wyvern.Lexer.__StartTransitions["]"] = Wyvern.Lexer.States.CloseBracket
Wyvern.Lexer.__StartTransitions["("] = Wyvern.Lexer.States.OpenParenthesis
Wyvern.Lexer.__StartTransitions[")"] = Wyvern.Lexer.States.CloseParenthesis
Wyvern.Lexer.__StartTransitions["+"] = Wyvern.Lexer.States.Plus
Wyvern.Lexer.__StartTransitions["-"] = Wyvern.Lexer.States.Minus
Wyvern.Lexer.__StartTransitions["*"] = Wyvern.Lexer.States.Asterisk
Wyvern.Lexer.__StartTransitions["/"] = Wyvern.Lexer.States.Slash
Wyvern.Lexer.__StartTransitions["%"] = Wyvern.Lexer.States.Percent
Wyvern.Lexer.__StartTransitions["^"] = Wyvern.Lexer.States.Caret
Wyvern.Lexer.__StartTransitions["."] = Wyvern.Lexer.States.Dot

Wyvern.Lexer.__StartTransitions[">"] = Wyvern.Lexer.States.Greater
Wyvern.Lexer.__StartTransitions["<"] = Wyvern.Lexer.States.Less
Wyvern.Lexer.__StartTransitions["="] = Wyvern.Lexer.States.Equals
Wyvern.Lexer.__StartTransitions["!"] = Wyvern.Lexer.States.Bang

Wyvern.Lexer.__StartTransitions["|"] = Wyvern.Lexer.States.Pipe
Wyvern.Lexer.__StartTransitions["&"] = Wyvern.Lexer.States.Ampersand

Wyvern.Lexer.__StartTransitions["@"] = Wyvern.Lexer.States.At

Wyvern.Lexer.__StartTransitions["~"] = Wyvern.Lexer.States.Tilde
Wyvern.Lexer.__StartTransitions[char(10)] = Wyvern.Lexer.States.EndOfLine

Wyvern.ApplyString(Wyvern.Lexer.__StartTransitions, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_", Wyvern.Lexer.States.Identifier)
Wyvern.ApplyString(Wyvern.Lexer.__StartTransitions, "0123456789", Wyvern.Lexer.States.Number)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__PipeTransitions = {}
Wyvern.Lexer.__PipeTransitions["|"] = Wyvern.Lexer.States.PipePipe

Wyvern.ApplyString(Wyvern.Lexer.__PipeTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "|"), Wyvern.Lexer.States.EndPipe)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__AmpersandTransitions = {}
Wyvern.Lexer.__AmpersandTransitions["&"] = Wyvern.Lexer.States.AmpersandAmpersand

Wyvern.ApplyString(Wyvern.Lexer.__AmpersandTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "&"), Wyvern.Lexer.States.EndAmpersand)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__PlusTransitions = {}
Wyvern.Lexer.__PlusTransitions["+"] = Wyvern.Lexer.States.PlusPlus
Wyvern.Lexer.__PlusTransitions["="] = Wyvern.Lexer.States.PlusEquals

Wyvern.ApplyString(Wyvern.Lexer.__PlusTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "+="), Wyvern.Lexer.States.EndPlus)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__AtTransitions = {}

Wyvern.ApplyString(Wyvern.Lexer.__AtTransitions, Wyvern.EVERY_CHAR, Wyvern.Lexer.States.EndAt)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__MinusTransitions = {}
Wyvern.Lexer.__MinusTransitions["-"] = Wyvern.Lexer.States.MinusMinus
Wyvern.Lexer.__MinusTransitions[">"] = Wyvern.Lexer.States.Arrow
Wyvern.Lexer.__MinusTransitions["="] = Wyvern.Lexer.States.MinusEquals

Wyvern.ApplyString(Wyvern.Lexer.__MinusTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "->="), Wyvern.Lexer.States.EndMinus)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__StarTransitions = {}
Wyvern.Lexer.__StarTransitions["="] = Wyvern.Lexer.States.StarEquals

Wyvern.ApplyString(Wyvern.Lexer.__StarTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "="), Wyvern.Lexer.States.EndAsterisk)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__SlashTransitions = {}
Wyvern.Lexer.__SlashTransitions["="] = Wyvern.Lexer.States.SlashEquals
Wyvern.Lexer.__SlashTransitions["/"] = Wyvern.Lexer.States.LineComment
Wyvern.Lexer.__SlashTransitions["*"] = Wyvern.Lexer.States.BlockComment

Wyvern.ApplyString(Wyvern.Lexer.__SlashTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "=/*"), Wyvern.Lexer.States.EndSlash)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__PercentTransitions = {}
Wyvern.Lexer.__PercentTransitions["="] = Wyvern.Lexer.States.PercentEquals

Wyvern.ApplyString(Wyvern.Lexer.__PercentTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "="), Wyvern.Lexer.States.EndPercent)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__CaretTransitions = {}
Wyvern.Lexer.__CaretTransitions["="] = Wyvern.Lexer.States.CaretEquals
Wyvern.Lexer.__CaretTransitions["^"] = Wyvern.Lexer.States.CaretCaret

Wyvern.ApplyString(Wyvern.Lexer.__CaretTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "=^"), Wyvern.Lexer.States.EndCaret)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__IdentifierTransitions = {}

Wyvern.ApplyString(Wyvern.Lexer.__IdentifierTransitions, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_", Wyvern.Lexer.States.Identifier)
Wyvern.ApplyString(Wyvern.Lexer.__IdentifierTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"), Wyvern.Lexer.States.EndIdentifier)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__WhiteSpaceTransitions = {}
Wyvern.Lexer.__WhiteSpaceTransitions[" "] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__WhiteSpaceTransitions[char(9)] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__WhiteSpaceTransitions[char(11)] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__WhiteSpaceTransitions[char(12)] = Wyvern.Lexer.States.Whitespace
Wyvern.Lexer.__WhiteSpaceTransitions[char(13)] = Wyvern.Lexer.States.Whitespace

Wyvern.ApplyString(Wyvern.Lexer.__WhiteSpaceTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, " " + char(9)), Wyvern.Lexer.States.EndWhitespace)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__NumberTransitions = {}
Wyvern.Lexer.__NumberTransitions["."] = Wyvern.Lexer.States.Float

Wyvern.ApplyString(Wyvern.Lexer.__NumberTransitions, "0123456789", Wyvern.Lexer.States.Number)
Wyvern.ApplyString(Wyvern.Lexer.__NumberTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "0123456789."), Wyvern.Lexer.States.EndNumber)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__FloatTransitions = {}
Wyvern.ApplyString(Wyvern.Lexer.__FloatTransitions, "0123456789", Wyvern.Lexer.States.Float)
Wyvern.ApplyString(Wyvern.Lexer.__FloatTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "0123456789"), Wyvern.Lexer.States.EndNumber)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__StringTransitions = {}
Wyvern.Lexer.__StringTransitions[""""] = Wyvern.Lexer.States.EndString
Wyvern.Lexer.__StringTransitions["\"] = Wyvern.Lexer.States.EscapeChar
Wyvern.ApplyString(Wyvern.Lexer.__StringTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, """\" + char(10) + char(0)), Wyvern.Lexer.States.String)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__EscapeCharTransitions = {}
Wyvern.Lexer.__EscapeCharTransitions["n"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["r"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["t"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["v"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["0"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["b"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["f"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions["\"] = Wyvern.Lexer.States.String
Wyvern.Lexer.__EscapeCharTransitions[""""] = Wyvern.Lexer.States.String
Wyvern.ApplyString(Wyvern.Lexer.__EscapeCharTransitions, """\bfnrt0v", Wyvern.Lexer.States.String)
////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__LineCommentTransitions = {}
Wyvern.Lexer.__LineCommentTransitions[char(10)] = Wyvern.Lexer.States.EndLineComment
Wyvern.Lexer.__LineCommentTransitions[char(0)] = Wyvern.Lexer.States.EndLineComment
Wyvern.ApplyString(Wyvern.Lexer.__LineCommentTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, char(10) + char(0), ""), Wyvern.Lexer.States.LineComment)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__BlockCommentTransitions = {}
Wyvern.Lexer.__BlockCommentTransitions["*"] = Wyvern.Lexer.States.BlockCommentStar
Wyvern.ApplyString(Wyvern.Lexer.__BlockCommentTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "*" + char(0)), Wyvern.Lexer.States.BlockComment)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__BlockCommentStarTransitions = {}
Wyvern.Lexer.__BlockCommentStarTransitions["/"] = Wyvern.Lexer.States.EndBlockComment
Wyvern.ApplyString(Wyvern.Lexer.__BlockCommentStarTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "/"), Wyvern.Lexer.States.BlockComment)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__GreaterTransitions = {}
Wyvern.Lexer.__GreaterTransitions["="] = Wyvern.Lexer.States.GreaterEquals
Wyvern.Lexer.__GreaterTransitions[">"] = Wyvern.Lexer.States.GreaterGreater

Wyvern.ApplyString(Wyvern.Lexer.__GreaterTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "=>"), Wyvern.Lexer.States.EndGreater)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__LessTransitions = {}
Wyvern.Lexer.__LessTransitions["="] = Wyvern.Lexer.States.LessEquals
Wyvern.Lexer.__LessTransitions["<"] = Wyvern.Lexer.States.LessLess

Wyvern.ApplyString(Wyvern.Lexer.__LessTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "<="), Wyvern.Lexer.States.EndLess)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__GreaterGreaterTransitions = {}
Wyvern.Lexer.__GreaterGreaterTransitions[">"] = Wyvern.Lexer.States.GreaterGreaterGreater
Wyvern.ApplyString(Wyvern.Lexer.__GreaterGreaterTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, ">"), Wyvern.Lexer.States.EndGreaterGreater)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__EqualsTransitions = {}
Wyvern.Lexer.__EqualsTransitions["="] = Wyvern.Lexer.States.EqualsEquals
Wyvern.ApplyString(Wyvern.Lexer.__EqualsTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "="), Wyvern.Lexer.States.EndEquals)

////////////////////////////////////////////////////////////////////////////////

Wyvern.Lexer.__BangTransitions = {}
Wyvern.Lexer.__BangTransitions["="] = Wyvern.Lexer.States.BangEquals
Wyvern.ApplyString(Wyvern.Lexer.__BangTransitions, Wyvern.ReplaceEveryChar(Wyvern.EVERY_CHAR, "="), Wyvern.Lexer.States.EndBang)

////////////////////////////////////////////////////////////////////////////////

// Transitions
Wyvern.Lexer.Transitions = {}
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Start] = Wyvern.Lexer.__StartTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Number] = Wyvern.Lexer.__NumberTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Float] = Wyvern.Lexer.__FloatTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.String] = Wyvern.Lexer.__StringTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.EscapeChar] = Wyvern.Lexer.__EscapeCharTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Identifier] = Wyvern.Lexer.__IdentifierTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Whitespace] = Wyvern.Lexer.__WhiteSpaceTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Plus] = Wyvern.Lexer.__PlusTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Minus] = Wyvern.Lexer.__MinusTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Asterisk] = Wyvern.Lexer.__StarTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Slash] = Wyvern.Lexer.__SlashTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Percent] = Wyvern.Lexer.__PercentTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Caret] = Wyvern.Lexer.__CaretTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.LineComment] = Wyvern.Lexer.__LineCommentTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.BlockComment] = Wyvern.Lexer.__BlockCommentTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.BlockCommentStar] = Wyvern.Lexer.__BlockCommentStarTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Equals] = Wyvern.Lexer.__EqualsTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Bang] = Wyvern.Lexer.__BangTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Greater] = Wyvern.Lexer.__GreaterTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Less] = Wyvern.Lexer.__LessTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.GreaterGreater] = Wyvern.Lexer.__GreaterGreaterTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Pipe] = Wyvern.Lexer.__PipeTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.Ampersand] = Wyvern.Lexer.__AmpersandTransitions
Wyvern.Lexer.Transitions[Wyvern.Lexer.States.At] = Wyvern.Lexer.__AtTransitions

// Syntax Kinds
Wyvern.Lexer.SyntaxKinds = {}
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndNumber] = Wyvern.SyntaxKind.NumberToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndString] = Wyvern.SyntaxKind.StringToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndOfFile] = Wyvern.SyntaxKind.EndOfFileToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndOfLine] = Wyvern.SyntaxKind.EndOfLineToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndWhitespace] = Wyvern.SyntaxKind.WhitespaceToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndIdentifier] = Wyvern.SyntaxKind.IdentifierToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Unkown] = Wyvern.SyntaxKind.UnkownToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Comma] = Wyvern.SyntaxKind.CommaToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Dot] = Wyvern.SyntaxKind.DotToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Colon] = Wyvern.SyntaxKind.ColonToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Semicolon] = Wyvern.SyntaxKind.SemicolonToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Signature] = Wyvern.SyntaxKind.SignatureToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.OpenParenthesis] = Wyvern.SyntaxKind.OpenParenthesisToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.CloseParenthesis] = Wyvern.SyntaxKind.CloseParenthesisToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.OpenBracket] = Wyvern.SyntaxKind.OpenBracketToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.CloseBracket] = Wyvern.SyntaxKind.CloseBracketToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.OpenBrace] = Wyvern.SyntaxKind.OpenBraceToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.CloseBrace] = Wyvern.SyntaxKind.CloseBraceToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndPipe] = Wyvern.SyntaxKind.PipeToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.PipePipe] = Wyvern.SyntaxKind.PipePipeToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndAmpersand] = Wyvern.SyntaxKind.AmpersandToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.AmpersandAmpersand] = Wyvern.SyntaxKind.AmpersandAmpersandToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndPlus] = Wyvern.SyntaxKind.PlusToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.PlusPlus] = Wyvern.SyntaxKind.PlusPlusToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.PlusEquals] = Wyvern.SyntaxKind.PlusEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndMinus] = Wyvern.SyntaxKind.MinusToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.MinusMinus] = Wyvern.SyntaxKind.MinusMinusToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Arrow] = Wyvern.SyntaxKind.ArrowToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.MinusEquals] = Wyvern.SyntaxKind.MinusEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndAsterisk] = Wyvern.SyntaxKind.AsteriskToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.StarEquals] = Wyvern.SyntaxKind.AsteriskEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndSlash] = Wyvern.SyntaxKind.SlashToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.SlashEquals] = Wyvern.SyntaxKind.SlashEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndPercent] = Wyvern.SyntaxKind.PercentToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.PercentEquals] = Wyvern.SyntaxKind.PercentEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndCaret] = Wyvern.SyntaxKind.CaretToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.CaretEquals] = Wyvern.SyntaxKind.CaretEqualsToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.CaretCaret] = Wyvern.SyntaxKind.CaretCaretToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndLineComment] = Wyvern.SyntaxKind.LineCommentToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndBlockComment] = Wyvern.SyntaxKind.BlockCommentToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndEquals] = Wyvern.SyntaxKind.EqualsToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EqualsEquals] = Wyvern.SyntaxKind.EqualsEqualsToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndBang] = Wyvern.SyntaxKind.BangToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.BangEquals] = Wyvern.SyntaxKind.BangEqualsToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndGreater] = Wyvern.SyntaxKind.GreaterToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndLess] = Wyvern.SyntaxKind.LessToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndGreaterGreater] = Wyvern.SyntaxKind.GreaterGreaterToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.GreaterEquals] = Wyvern.SyntaxKind.GreaterEqualToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.GreaterGreaterGreater] = Wyvern.SyntaxKind.GreaterGreaterGreaterToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.LessEquals] = Wyvern.SyntaxKind.LessEqualToken
Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.LessLess] = Wyvern.SyntaxKind.LessLessToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.Tilde] = Wyvern.SyntaxKind.TildeToken

Wyvern.Lexer.SyntaxKinds[Wyvern.Lexer.States.EndAt] = Wyvern.SyntaxKind.AtToken

///////////////////////////////// END STATE HANDLING ////////////////////////////////

///////////////////////////////// BEGIN TOKEN HANDLING ////////////////////////////////
Wyvern.Lexer.ProcessString = function(text)
    text = text[1:-1]
    if text == null then
        return ""
    end if
    
    text = text.replace("\\""", """")
    text = text.replace("\\n", char(10))
    text = text.replace("\\r", char(13))
    text = text.replace("\\t", char(9))
    text = text.replace("\\\\", "\")
    text = text.replace("\\0", char(0))
    text = text.replace("\\f", char(12))
    text = text.replace("\\b", char(8))
    text = text.replace("\\v", char(11))
    return text
end function

Wyvern.Lexer.HandleIdentifer = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxFacts.GetKeywordKind(tokenText), tokenBegin, tokenText)
end function

Wyvern.Lexer.HandleString = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxKind.StringToken, tokenBegin, tokenText, Wyvern.Lexer.ProcessString(tokenText))
end function

Wyvern.Lexer.HandleNumber = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxKind.NumberToken, tokenBegin, tokenText, tokenText.val)
end function

Wyvern.Lexer.HandleLineComment = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxKind.CommentToken, tokenBegin, tokenText, tokenText[2:])
end function

Wyvern.Lexer.HandleBlockComment = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxKind.CommentToken, tokenBegin, tokenText, tokenText[2:-2])
end function

Wyvern.Lexer.HandleEndOfFile = function(syntaxTree, tokenBegin, tokenText)
    return Wyvern.SyntaxToken.New(syntaxTree, Wyvern.SyntaxKind.EndOfFileToken, tokenBegin, tokenText + char(0))
end function

Wyvern.Lexer.TokenHandlers = {}
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.IdentifierToken] = @Wyvern.Lexer.HandleIdentifer
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.StringToken] = @Wyvern.Lexer.HandleString
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.NumberToken] = @Wyvern.Lexer.HandleNumber
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.LineCommentToken] = @Wyvern.Lexer.HandleLineComment
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.BlockCommentToken] = @Wyvern.Lexer.HandleBlockComment
Wyvern.Lexer.TokenHandlers[Wyvern.SyntaxKind.EndOfFileToken] = @Wyvern.Lexer.HandleEndOfFile

Wyvern.Lexer.Lex = function()
    state = self.States.Start
    tokenBegin = self.Position

    while state < self.States.End
        state = self.Transition(state, tokenBegin)
        if state >= self.States.EndStepBack then
            break
        end if
        self.Next()
    end while
    
    tokenText = self.Substring(tokenBegin, self.Position)
    tokenKind = self.SyntaxKinds[state]

    if self.TokenHandlers.hasIndex(tokenKind) then
        f = @self.TokenHandlers[tokenKind]
        return f(self.SyntaxTree, tokenBegin, tokenText)
    end if

    return Wyvern.SyntaxToken.New(self.SyntaxTree, tokenKind, tokenBegin, tokenText)
end function

Wyvern.Lexer.CreateLocation = function(start, length)
    return Wyvern.TextLocation.New(self.Text, Wyvern.TextSpan.New(start, length))
end function

Wyvern.Lexer.CreateLocation2 = function(start, endd)
    return Wyvern.TextLocation.New(self.Text, Wyvern.TextSpan.FromBounds(start, endd))
end function

Wyvern.Lexer.Transition = function(state, tokenBegin)
    ch = self.Current()

    transition = self.Transitions[state]
    
    if not transition.hasIndex(ch) then
        // Wyvern.TextSpan.New(start, text.len)
        if state == self.States.EscapeChar then
            self.Diagnostics.ReportUnkownEscapeCharacter(self.CreateLocation(self.Position - 1, 2))//(self.Position - 1, "\" + ch)
            return self.States.String
        else if state == self.States.Float and ch == "." then
            self.Diagnostics.ReportDoubleDotFloat(self.CreateLocation2(tokenBegin, self.Position))//(tokenBegin, self.Substring(tokenBegin, self.Position))
            return state
        else if state == self.States.String and (ch == char(10) or ch == char(0)) then
            self.Diagnostics.ReportUnterminatedString(self.CreateLocation2(tokenBegin, self.Position))
            self.Next(-1)
            return self.States.EndString
        else if state == self.States.BlockComment then
            self.Diagnostics.ReportUnterminatedComment(self.CreateLocation2(tokenBegin, self.Position))
            return self.States.EndBlockComment
        else
            self.Diagnostics.ReportUnkownToken(self.CreateLocation2(tokenBegin, self.Position))
            return self.States.Unkown
        end if
    end if

    return transition[ch]
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ExpressionSyntax = new Wyvern.SyntaxNode

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.LiteralExpressionSyntax = new Wyvern.ExpressionSyntax + {"LiteralToken":-1, "Value":-1}

Wyvern.LiteralExpressionSyntax.Init = function(literalToken, value=null)
    self.LiteralToken = literalToken
    if value == null then
        self.Value = literalToken.Value
    else
        self.Value = value
    end if
    self.Kind = Wyvern.SyntaxKind.LiteralExpression
end function

// New Function
Wyvern.LiteralExpressionSyntax.New = function(literalToken, value=null)
    newInstance = new Wyvern.LiteralExpressionSyntax
    newInstance.Init(literalToken, value)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.BinaryExpressionSyntax = new Wyvern.ExpressionSyntax + {"Left":-1, "Operator":-1, "Right":-1}

Wyvern.BinaryExpressionSyntax.Init = function(left, operator, right)
    self.Left = left
    self.Operator = operator
    self.Right = right

    self.Kind = Wyvern.SyntaxKind.BinaryExpression
end function

Wyvern.BinaryExpressionSyntax.New = function(left, operator, right)
    newInstance = new Wyvern.BinaryExpressionSyntax
    newInstance.Init(left, operator, right)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ParenthesizedExpressionSyntax = new Wyvern.ExpressionSyntax + {"OpenParenthesis":-1, "Expression":-1, "CloseParenthesis":-1}

Wyvern.ParenthesizedExpressionSyntax.Init = function(openParenthesis, expression, closeParenthesis)
    self.OpenParenthesis = openParenthesis
    self.Expression = expression
    self.CloseParenthesis = closeParenthesis
    self.Kind = Wyvern.SyntaxKind.ParenthesizedExpression
end function

Wyvern.ParenthesizedExpressionSyntax.New = function(openParenthesis, expression, closeParenthesis)
    newInstance = new Wyvern.ParenthesizedExpressionSyntax
    newInstance.Init(openParenthesis, expression, closeParenthesis)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.UnaryExpressionSyntax = new Wyvern.ExpressionSyntax + {"Operator":-1, "Operand":-1}

Wyvern.UnaryExpressionSyntax.Init = function(operator, operand)
    self.Operator = operator
    self.Operand = operand
    self.Kind = Wyvern.SyntaxKind.UnaryExpression
end function

Wyvern.UnaryExpressionSyntax.New = function(operator, operand)
    newInstance = new Wyvern.UnaryExpressionSyntax
    newInstance.Init(operator, operand)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.AfterUnaryExpressionSyntax = new Wyvern.ExpressionSyntax + {"Operand":-1, "Operator":-1}

Wyvern.AfterUnaryExpressionSyntax.Init = function(operand, operator)
    self.Operand = operand
    self.Operator = operator
    self.Kind = Wyvern.SyntaxKind.AfterUnaryExpression
end function

Wyvern.AfterUnaryExpressionSyntax.New = function(operand, operator)
    newInstance = new Wyvern.AfterUnaryExpressionSyntax
    newInstance.Init(operand, operator)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.NameExpressionSyntax = new Wyvern.ExpressionSyntax + {"Identifier":-1}

Wyvern.NameExpressionSyntax.Init = function(Identifier)
    self.Identifier = Identifier
    self.Kind = Wyvern.SyntaxKind.NameExpression
end function

Wyvern.NameExpressionSyntax.New = function(Identifier)
    newInstance = new Wyvern.NameExpressionSyntax
    newInstance.Init(Identifier)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.AssignmentExpressionSyntax = new Wyvern.ExpressionSyntax + {"Left":-1, "EqualsToken":-1, "Expression":-1}

Wyvern.AssignmentExpressionSyntax.Init = function(left, equalsToken, expression)
    self.Left = left
    self.EqualsToken = equalsToken
    self.Expression = expression
    self.Kind = Wyvern.SyntaxKind.AssignmentExpression
end function

Wyvern.AssignmentExpressionSyntax.New = function(left, equalsToken, expression)
    newInstance = new Wyvern.AssignmentExpressionSyntax
    newInstance.Init(left, equalsToken, expression)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SeperateSyntaxList = {"NodesAndSeparators":-1}

Wyvern.SeperateSyntaxList.Init = function(nodesAndSeparators)
    self.NodesAndSeparators = nodesAndSeparators
end function

Wyvern.SeperateSyntaxList.Count = function()
    if self.NodesAndSeparators.len == 0 then
        return 0
    end if

    return (self.NodesAndSeparators.len() + 1) / 2
end function

Wyvern.SeperateSyntaxList.GetWithSeperators = function(index)
    return self.NodesAndSeparators
end function

Wyvern.SeperateSyntaxList.GetEnumurator = function()
    list = []
    i = 0
    
    while i < self.Count()
        list.push(self.Get(i))
        i = i + 1
    end while
    return list
end function

Wyvern.SeperateSyntaxList.Get = function(index)
    return self.NodesAndSeparators[index * 2]
end function

Wyvern.SeperateSyntaxList.GetSeparator = function(index)
    if index == self.Count() - 1 then
        return null
    end if

    return self.NodesAndSeparators[index * 2 + 1]
end function

Wyvern.SeperateSyntaxList.New = function(nodesAndSeparators)
    newInstance = new Wyvern.SeperateSyntaxList
    newInstance.Init(nodesAndSeparators)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.ArrayExpressionSyntax = new Wyvern.ExpressionSyntax + {"OpenBracket":-1, "Items":-1, "CloseBracket":-1}

Wyvern.ArrayExpressionSyntax.Init = function(openBracket, items, closeBracket)
    self.OpenBracket = openBracket
    self.Items = items
    self.CloseBracket = closeBracket

    self.Kind = Wyvern.SyntaxKind.ArrayExpression
end function

Wyvern.ArrayExpressionSyntax.New = function(openBracket, items, closeBracket)
    newInstance = new Wyvern.ArrayExpressionSyntax
    newInstance.Init(openBracket, items, closeBracket)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.MapExpressionSyntax = new Wyvern.ExpressionSyntax + {"OpenBrace":-1, "Pairs":-1, "CloseBrace":-1}

Wyvern.MapExpressionSyntax.Init = function(openBrace, pairs, closeBrace)
    self.OpenBrace = openBrace
    self.Pairs = pairs
    self.CloseBrace = closeBrace

    self.Kind = Wyvern.SyntaxKind.MapExpression
end function

Wyvern.MapExpressionSyntax.New = function(openBrace, pairs, closeBrace)
    newInstance = new Wyvern.MapExpressionSyntax
    newInstance.Init(openBrace, pairs, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.PairSyntax = new Wyvern.SyntaxNode + {"Key":-1, "Colon":-1, "Value":-1}

Wyvern.PairSyntax.Init = function(key, colon, value)
    self.Key = key
    self.Colon = colon
    self.Value = value

    self.Kind = Wyvern.SyntaxKind.PairSyntax
end function

Wyvern.PairSyntax.New = function(key, colon, value)
    newInstance = new Wyvern.PairSyntax
    newInstance.Init(key, colon, value)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CallExpressionSyntax = new Wyvern.ExpressionSyntax + {"Identifier":-1, "OpenParenthesis":-1, "Arguments":-1, "CloseParenthesis":-1}

Wyvern.CallExpressionSyntax.Init = function(identifier, openParenthesis, arguments, closeParenthesis)
    self.Identifier = identifier
    self.OpenParenthesis = openParenthesis
    self.Arguments = arguments
    self.CloseParenthesis = closeParenthesis

    self.Kind = Wyvern.SyntaxKind.CallExpression
end function

Wyvern.CallExpressionSyntax.New = function(identifier, openParenthesis, arguments, closeParenthesis)
    newInstance = new Wyvern.CallExpressionSyntax
    newInstance.Init(identifier, openParenthesis, arguments, closeParenthesis)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.StructArgumentSyntax = new Wyvern.SyntaxNode + {"Identifier":-1, "Colon":-1, "Expression":-1}

Wyvern.StructArgumentSyntax.Init = function(identifier, colon, expression)
    self.Identifier = identifier
    self.Colon = colon
    self.Expression = expression

    self.Kind = Wyvern.SyntaxKind.StructArgument
end function

Wyvern.StructArgumentSyntax.New = function(identifier, colon, expression)
    newInstance = new Wyvern.StructArgumentSyntax
    newInstance.Init(identifier, colon, expression)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.NewStructExpressionSyntax = new Wyvern.ExpressionSyntax + {"NewKeyword":-1, "Identifier":-1, "OpenBrace":-1, "Arguments":-1, "CloseBrace":-1}

Wyvern.NewStructExpressionSyntax.Init = function(newKeyword, identifier, openBrace, arguments, closeBrace)
    self.NewKeyword = newKeyword
    self.Identifier = identifier
    self.OpenBrace = openBrace
    self.Arguments = arguments
    self.CloseBrace = closeBrace

    self.Kind = Wyvern.SyntaxKind.NewStructExpression
end function

Wyvern.NewStructExpressionSyntax.New = function(newKeyword, identifier, openBrace, arguments, closeBrace)
    newInstance = new Wyvern.NewStructExpressionSyntax
    newInstance.Init(newKeyword, identifier, openBrace, arguments, closeBrace)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.CastExpressionSyntax = new Wyvern.ExpressionSyntax + {"CastKeyword":-1, "Less":-1, "Signature":-1, "Greater":-1, "OpenParenthesis":-1, "Expression":-1, "CloseParenthesis":-1}

Wyvern.CastExpressionSyntax.Init = function(cast, less, signature, greater, openParenthesis, expression, closeParenthesis)
    self.Cast = cast
    self.Less = less
    self.Signature = signature
    self.Greater = greater
    self.OpenParenthesis = openParenthesis
    self.Expression = expression
    self.CloseParenthesis = closeParenthesis

    self.Kind = Wyvern.SyntaxKind.CastExpression
end function

Wyvern.CastExpressionSyntax.New = function(cast, less, signature, greater, openParenthesis, expression, closeParenthesis)
    newInstance = new Wyvern.CastExpressionSyntax
    newInstance.Init(cast, less, signature, greater, openParenthesis, expression, closeParenthesis)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.NewExpressionSyntax = new Wyvern.ExpressionSyntax + {"New":-1, "Expression":-1}

Wyvern.NewExpressionSyntax.Init = function(_new, expression)
    self.New = _new
    self.Expression = expression

    self.Kind = Wyvern.SyntaxKind.NewExpression
end function

Wyvern.NewExpressionSyntax.New = function(_new, expression)
    newInstance = new Wyvern.NewExpressionSyntax
    newInstance.Init(_new, expression)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.IndexExpressionSyntax = new Wyvern.ExpressionSyntax + {"Expression":-1, "OpenBracket":-1, "ValueExpression":-1, "CloseBracket":-1}

Wyvern.IndexExpressionSyntax.Init = function(expression, openBracket, valueExpression, closeBracket)
    self.Expression = expression
    self.OpenBracket = openBracket
    self.ValueExpression = valueExpression
    self.CloseBracket = closeBracket

    self.Kind = Wyvern.SyntaxKind.IndexExpression
end function

Wyvern.IndexExpressionSyntax.New = function(expression, openBracket, valueExpression, closeBracket)
    newInstance = new Wyvern.IndexExpressionSyntax
    newInstance.Init(expression, openBracket, valueExpression, closeBracket)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.NamecallExpressionSyntax = new Wyvern.ExpressionSyntax + {"Left":-1, "Dot":-1, "Right":-1}

Wyvern.NamecallExpressionSyntax.Init = function(left, dot, right)
    self.Left = left
    self.Dot = dot
    self.Right = right

    self.Kind = Wyvern.SyntaxKind.NamecallExpression
end function

Wyvern.NamecallExpressionSyntax.New = function(left, dot, right)
    newInstance = new Wyvern.NamecallExpressionSyntax
    newInstance.Init(left, dot, right)
    return newInstance
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.Parser = {"SyntaxTree":-1, "Text":"", "Position":0, "Tokens":[], "Diagnostics":[]}

Wyvern.Parser.Init = function(syntaxTree)
    self.SyntaxTree = syntaxTree
    self.Text = syntaxTree.Text
    self.Position = 0
    self.Tokens = []
    self.Diagnostics = Wyvern.DiagnosticBag.New()

    lexer = Wyvern.Lexer.New(syntaxTree)

    while true
        token = lexer.Lex()
        if token.Kind != Wyvern.SyntaxKind.EndOfLineToken and token.Kind != Wyvern.SyntaxKind.WhitespaceToken and token.Kind != Wyvern.SyntaxKind.UnkownToken and token.Kind != Wyvern.SyntaxKind.CommentToken then
            self.Tokens.push(token)
        end if

        if token.Kind == Wyvern.SyntaxKind.EndOfFileToken then
            break
        end if
    end while

    self.Diagnostics = self.Diagnostics.Concat(lexer.Diagnostics)
end function

Wyvern.Parser.New = function(syntaxTree)
    newInstance = new Wyvern.Parser
    newInstance.Init(syntaxTree)
    return newInstance
end function

Wyvern.Parser.Peek = function(offset)
    index = self.Position + offset
    if index >= self.Tokens.len then return self.Tokens[self.Tokens.len - 1]
    return self.Tokens[index]
end function

Wyvern.Parser.Current = function()
    return self.Peek(0)
end function

Wyvern.Parser.NextToken = function()
    currentToken = self.Current()
    self.Position = self.Position + 1
    return currentToken
end function

Wyvern.Parser.MatchToken = function(kind)
    if self.Current().Kind == kind then return self.NextToken()

    self.Diagnostics.ReportUnexpectedToken(self.Current(), kind)
    fabricatedToken = Wyvern.SyntaxToken.New(self.SyntaxTree, kind, self.Current().Start, null)
    self.NextToken()
    return fabricatedToken
end function

Wyvern.Parser.ParseCompilationUnit = function()
    members = self.ParseMembers()
    endOfFileToken = self.MatchToken(Wyvern.SyntaxKind.EndOfFileToken)
    return Wyvern.CompilationUnitSyntax.New(members, endOfFileToken)
end function

Wyvern.Parser.ParseMembers = function()
    members = []

    while self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        startToken = self.Current()

        member = self.ParseMember()
        members.push(member)

        if self.Current() == startToken then
            self.NextToken()
        end if
    end while

    return members
end function

Wyvern.Parser.ParseMember = function()
    if self.Current().Kind == Wyvern.SyntaxKind.FunctionKeyword then
        return self.ParseFunctionDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.ClassKeyword then
        return self.ParseClassDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.StructKeyword then
        return self.ParseStructDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.ContractKeyword then
        return self.ParseContractDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.EnumKeyword then
        return self.ParseEnumDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.ImportKeyword then
        return self.ParseImport()
    else if self.Current().Kind == Wyvern.SyntaxKind.MSImportKeyword then
        return self.ParseMSImport()
    end if

    return self.ParseGlobalStatement()
end function

Wyvern.Parser.ParseStructDeclaration = function()
    structKeyword = self.MatchToken(Wyvern.SyntaxKind.StructKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)

    openBrace = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    members = self.ParseStructMembers()
    closeBrace = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)

    return Wyvern.StructDeclarationSyntax.New(structKeyword, identifier, openBrace, members, closeBrace)
end function

Wyvern.Parser.ParseStructMember = function()
    if self.Current().Kind == Wyvern.SyntaxKind.VarKeyword or self.Current().Kind == Wyvern.SyntaxKind.LetKeyword or self.Current().Kind == Wyvern.SyntaxKind.ConstKeyword then
        expression = self.ParseVariableDeclaration()
        return expression
    end if

    return null
end function

Wyvern.Parser.ParseStructMembers = function()
    members = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        startToken = self.Current()

        member = self.ParseStructMember()
        if member != null then
            members.push(member)
        else
            self.Diagnostics.ReportIsntMember(startToken.Location)
        end if

        if self.Current() == startToken then
            self.NextToken()
        end if
    end while

    return members
end function

Wyvern.Parser.ParseImport = function()
    importKeyword = self.MatchToken(Wyvern.SyntaxKind.ImportKeyword)
    stringPath = self.MatchToken(Wyvern.SyntaxKind.StringToken)
    semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)

    if not stringPath.IsMissing then
        file = Wyvern.SearchFile(stringPath.Value)
        if not file then
            self.Diagnostics.ReportUnableToOpenFile(stringPath.Location, stringPath.Value)
        end if
    else
        file = null
    end if

    if file != null then
        if self.SyntaxTree.Imports.indexOf(file) != null then
            syntaxTree = Wyvern.SyntaxTree.Parse("/* WYVERN ANTI REIMPORT SYSTEM: " + file.path + " */")
        else
            syntaxTree = Wyvern.SyntaxTree.ParseFile(file, self.SyntaxTree.Imports)
            self.SyntaxTree.Imports = syntaxTree.Imports
        end if
        self.Diagnostics.AddRange(syntaxTree.Diagnostics)
    else
        syntaxTree = null
    end if

    return Wyvern.ImportSyntax.New(importKeyword, stringPath, semicolonToken, file, syntaxTree)
end function

Wyvern.Parser.ParseMSImport = function()
    msImportKeyword = self.MatchToken(Wyvern.SyntaxKind.MSImportKeyword)
    stringPath = self.MatchToken(Wyvern.SyntaxKind.StringToken)

    openBraceToken = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    members = self.ParseImportMembers()
    closeBraceToken = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)
    return Wyvern.MSImportSyntax.New(msImportKeyword, stringPath, openBraceToken, members, closeBraceToken)
end function

Wyvern.Parser.ParseImportMembers = function()
    members = []
    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        startToken = self.Current()

        members.push(self.ParseImportMember())

        if self.Current() == startToken then
            self.NextToken()
        end if
    end while
    return members
end function

Wyvern.Parser.ParseImportMember = function()
    if self.Current().Kind == Wyvern.SyntaxKind.FunctionKeyword then
        return self.ParseFunctionDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.ClassKeyword then
        return self.ParseClassDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.EnumKeyword then
        return self.ParseEnumDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.LetKeyword or self.Current().Kind == Wyvern.SyntaxKind.VarKeyword or self.Current().Kind == Wyvern.SyntaxKind.ConstKeyword then
        return self.ParseVariableDeclaration()
    end if
end function

Wyvern.Parser.ParseEnumDeclaration = function()
    enumKeyword = self.MatchToken(Wyvern.SyntaxKind.EnumKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)

    openBraceToken = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        eidentifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
        
        if self.Current().Kind == Wyvern.SyntaxKind.EqualsToken then
            equals = self.MatchToken(Wyvern.SyntaxKind.EqualsToken)
            right = self.ParseEnumLiteral()
            nodesAndSeparators.push(Wyvern.AssignmentExpressionSyntax.New(eidentifier, equals, right))
        else
            nodesAndSeparators.push(eidentifier)
        end if

        if self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken then
            comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseBraceToken then
                self.Diagnostics.ReportUnexpectedToken(comma, Wyvern.SyntaxKind.CloseBraceToken)
                continue
            end if
            nodesAndSeparators.push(comma)
        end if
    end while
    
    closeBraceToken = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)
    return Wyvern.EnumDeclarationSyntax.New(enumKeyword, identifier, openBraceToken, Wyvern.SeperateSyntaxList.New(nodesAndSeparators), closeBraceToken)
end function

Wyvern.Parser.ParseEnumLiteral = function()
    unaryOperatorPrecedence = Wyvern.SyntaxFacts.GetUnaryOperatorPrecedence(self.Current().Kind)
    if unaryOperatorPrecedence != 0 then
        operator = self.NextToken()
        operand = self.ParseNumberLiteral()
        return Wyvern.UnaryExpressionSyntax.New(operator, operand)
    end if

    return self.ParseNumberLiteral()
end function

Wyvern.Parser.ParseFunctionDeclaration = function()
    functionKeyword = self.MatchToken(Wyvern.SyntaxKind.FunctionKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)

    openParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    parameters = self.ParseParameterList()
    closeParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)

    type = self.ParseTypeClause(true)
    if self.Current().Kind == Wyvern.SyntaxKind.SemicolonToken then
        body = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    else
        body = self.ParseBlockStatement()
    end if

    return Wyvern.FunctionDeclarationSyntax.New(functionKeyword, identifier, openParenthesisToken, parameters, closeParenthesisToken, type, body)
end function

Wyvern.Parser.ParseParameterList = function()
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseParenthesisToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        parameter = self.ParseParameter()
        nodesAndSeparators.push(parameter)

        if self.Current().Kind != Wyvern.SyntaxKind.CloseParenthesisToken then
            separator = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseParenthesisToken then
                self.Diagnostics.ReportUnexpectedToken(separator, Wyvern.SyntaxKind.CloseParenthesisToken)
                continue
            end if
            nodesAndSeparators.push(separator)
        end if
    end while

    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseParameter = function()
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    type = self.ParseTypeClause()

    if self.Current().Kind == Wyvern.SyntaxKind.EqualsToken then
        equalsToken = self.MatchToken(Wyvern.SyntaxKind.EqualsToken)
        initializer = self.ParseExpression()
        return Wyvern.ParameterSyntax.New(identifier, type, equalsToken, initializer)
    end if

    return Wyvern.ParameterSyntax.New(identifier, type)
end function

Wyvern.Parser.ParseClassDeclaration = function()
    classKeyword = self.MatchToken(Wyvern.SyntaxKind.ClassKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)

    extensionClause = self.ParseExtensionClause()
    contractClause = self.ParseContractClause()
    // Allows style choice I guess
    if self.Current().Kind == Wyvern.SyntaxKind.ColonToken and extensionClause == null then
        extensionClause = self.ParseExtensionClause()
    end if
    openBraceToken = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    members = self.ParseTypeMembers(identifier.Text)
    closeBraceToken = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)
    return Wyvern.ClassDeclarationSyntax.New(classKeyword, identifier, extensionClause, contractClause, openBraceToken, members, closeBraceToken)
end function

Wyvern.Parser.ParseContractDeclaration = function()
    contractKeyword = self.MatchToken(Wyvern.SyntaxKind.ContractKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    contractClause = self.ParseContractClause() // Contracts within contracts

    openBraceToken = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    members = self.ParseTypeMembers(identifier.Text)
    closeBraceToken = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)

    for memberSyntax in members
        declaration = memberSyntax.Declaration
        if (declaration.Kind == Wyvern.SyntaxKind.VariableDeclaration and declaration.Initializer != null) or (declaration.Kind == Wyvern.SyntaxKind.FunctionDeclaration and declaration.Body.Kind != Wyvern.SyntaxKind.SemicolonToken) then
            self.Diagnostics.ReportMemberCantHave(declaration.Identifier.Location, declaration.Identifier.Text)
        end if
    end for

    return Wyvern.ContractDeclarationSyntax.New(contractKeyword, identifier, contractClause, openBraceToken, members, closeBraceToken)
end function

Wyvern.Parser.ParseExtensionClause = function()
    if self.Current().Kind == Wyvern.SyntaxKind.ColonToken then
        colonToken = self.MatchToken(Wyvern.SyntaxKind.ColonToken)
        identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
        return Wyvern.ExtensionClauseSyntax.New(colonToken, identifier)
    end if

    return null
end function

Wyvern.Parser.ParseContractClause = function()
    if self.Current().Kind == Wyvern.SyntaxKind.SignatureToken then
        signatureToken = self.MatchToken(Wyvern.SyntaxKind.SignatureToken)
        contracts = self.ParseWordList()
        return Wyvern.ContractClauseSyntax.New(signatureToken, contracts)
    end if

    return null
end function

Wyvern.Parser.ParseWordList = function()
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
        nodesAndSeparators.push(identifier)

        if self.Current().Kind != Wyvern.SyntaxKind.CommaToken then
            break
        end if

        comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
        nodesAndSeparators.push(comma)
    end while

    last = nodesAndSeparators.pop()
    if last.Kind == Wyvern.SyntaxKind.CommaToken then
        self.Diagnostics.ReportUnexpectedToken(last, self.Current().Kind)
    else
        nodesAndSeparators.push(last)
    end if
    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseTypeMembers = function(t="")
    members = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        startToken = self.Current()

        member = self.ParseTypeMember(t)
        if member != null then
            members.push(member)
        else
            self.Diagnostics.ReportIsntMember(startToken.Location)
        end if

        if self.Current() == startToken then
            self.NextToken()
        end if
    end while

    return members
end function

Wyvern.Parser.ParseTypeMember = function(t="")
    modifiers = []
    modifierS = {}
    while Wyvern.IsAModifier(self.Current().Kind)
        modifier = self.ParseModifier()
        if modifierS.hasIndex(modifier.ToString()) then
            self.Diagnostics.ReportCannotRepeatModifier(modifier.Location, t, modifier)
            continue
        end if
        modifiers.push(modifier)
        modifierS[modifier.ToString()] = modifier
    end while

    if modifierS.hasIndex("PublicKeyword") and modifier.hasIndex("PrivateKeyword") then
        self.Diagnostics.ReportCannotPublicAndPrivate(modifiersS["PublicKeyword"].Location.Combine(modifiersS["PrivateKeyword"].Location), t)
    end if

    if modifierS.hasIndex("OverrideKeyword") and modifier.hasIndex("VirtualKeyword") then
        self.Diagnostics.ReportCannotOverrideAndVirtual(modifiersS["OverrideKeyword"].Location.Combine(modifiersS["VirtualKeyword"].Location), t)
    end if

    if self.Current().Kind == Wyvern.SyntaxKind.FunctionKeyword then
        expression = self.ParseFunctionDeclaration()
        return Wyvern.TypeMemberSyntax.New(modifiers, expression)
    else if self.Current().Kind == Wyvern.SyntaxKind.VarKeyword or self.Current().Kind == Wyvern.SyntaxKind.LetKeyword or self.Current().Kind == Wyvern.SyntaxKind.ConstKeyword then
        expression = self.ParseVariableDeclaration()
        return Wyvern.TypeMemberSyntax.New(modifiers, expression)
    end if

    return null
end function

Wyvern.Parser.ParseModifier = function()
    if Wyvern.IsAModifier(self.Current().Kind) then
        return self.MatchToken(self.Current().Kind)
    end if
end function

Wyvern.Parser.ParseGlobalStatement = function()
    statement = self.ParseStatement()
    return Wyvern.GlobalStatementSyntax.New(statement)
end function

Wyvern.Parser.ParseStatement = function(checkForSemi=true)
    if self.Current().Kind == Wyvern.SyntaxKind.OpenBraceToken then
        return self.ParseBlockStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.LetKeyword or self.Current().Kind == Wyvern.SyntaxKind.VarKeyword or self.Current().Kind == Wyvern.SyntaxKind.ConstKeyword then
        return self.ParseVariableDeclaration()
    else if self.Current().Kind == Wyvern.SyntaxKind.IfKeyword then
        return self.ParseIfStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.SwitchKeyword then
        return self.ParseSwitchStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.WhileKeyword then
        return self.ParseWhileStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.DoKeyword then
        return self.ParseDoWhileStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.ForKeyword then
        return self.ParseForStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.ForeachKeyword then
        return self.ParseForeachStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.BreakKeyword then
        return self.ParseBreakStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.ContinueKeyword then
        return self.ParseContinueStatement()
    else if self.Current().Kind == Wyvern.SyntaxKind.ReturnKeyword then
        return self.ParseReturnStatement()
    end if

    return self.ParseExpressionStatement(checkForSemi) 
end function

Wyvern.Parser.ParseReturnStatement = function()
    keyword = self.MatchToken(Wyvern.SyntaxKind.ReturnKeyword)
    if self.Current().Kind == Wyvern.SyntaxKind.SemicolonToken then
        expression = null
        semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    else
        expression = self.ParseExpression()
        semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    end if

    return Wyvern.ReturnStatementSyntax.New(keyword, expression, semicolonToken)
end function

Wyvern.Parser.ParseBreakStatement = function()
    breakKeyword = self.MatchToken(Wyvern.SyntaxKind.BreakKeyword)
    semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    return Wyvern.BreakStatementSyntax.New(breakKeyword, semicolonToken)
end function

Wyvern.Parser.ParseContinueStatement = function()
    continueKeyword = self.MatchToken(Wyvern.SyntaxKind.ContinueKeyword)
    semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    return Wyvern.ContinueStatementSyntax.New(continueKeyword, semicolonToken)
end function

Wyvern.Parser.ParseWhileStatement = function()
    keyword = self.MatchToken(Wyvern.SyntaxKind.WhileKeyword)
    condition = self.ParseExpression()
    body = self.ParseStatement()

    return Wyvern.WhileStatementSyntax.New(keyword, condition, body)
end function

Wyvern.Parser.ParseDoWhileStatement = function()
    doKeyword = self.MatchToken(Wyvern.SyntaxKind.DoKeyword)
    body = self.ParseStatement()
    whileKeyword = self.MatchToken(Wyvern.SyntaxKind.WhileKeyword)
    condition = self.ParseExpression()
    semicolon = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)

    return Wyvern.DoWhileStatementSyntax.New(doKeyword, body, whileKeyword, condition, semicolon)
end function

Wyvern.Parser.ParseForStatement = function()
    keyword = self.MatchToken(Wyvern.SyntaxKind.ForKeyword)

    // This is for Bit#1564 since he request Parenthesized for loops.
    if self.Current().Kind == Wyvern.SyntaxKind.OpenParenthesisToken then
        openParenthesis = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    else
        openParenthesis = null
    end if

    pre = self.ParseStatement()
    condition = self.ParseExpression()
    self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    post = self.ParseStatement(false)

    if openParenthesis != null then
        closeParenthesis = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)
    else
        closeParenthesis = null
    end if

    body = self.ParseStatement()
    return Wyvern.ForStatementSyntax.New(keyword, openParenthesis, pre, condition, post, closeParenthesis, body)
end function

Wyvern.Parser.ParseForeachStatement = function()
    foreachKeyword = self.MatchToken(Wyvern.SyntaxKind.ForeachKeyword)

    if self.Current().Kind == Wyvern.SyntaxKind.OpenParenthesisToken then
        openParenthesis = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    else
        openParenthesis = null
    end if

    if self.Current().Kind == Wyvern.SyntaxKind.LetKeyword then
        expected = Wyvern.SyntaxKind.LetKeyword
    else if self.Current().Kind == Wyvern.SyntaxKind.VarKeyword then
        expected = Wyvern.SyntaxKind.VarKeyword
    else
        expected = Wyvern.SyntaxKind.ConstKeyword
    end if

    vKeyword = self.MatchToken(expected)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    typeClause = self.ParseTypeClause()

    inKeyword = self.MatchToken(Wyvern.SyntaxKind.InKeyword)
    iteratorExpression = self.ParseExpression()

    if openParenthesis != null then
        closeParenthesis = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)
    else
        closeParenthesis = null
    end if

    body = self.ParseStatement()
    return Wyvern.ForeachStatementSyntax.New(foreachKeyword, openParenthesis, vKeyword, identifier, typeClause, inKeyword, iteratorExpression, closeParenthesis, body)
end function

Wyvern.Parser.ParseIfStatement = function()
    keyword = self.MatchToken(Wyvern.SyntaxKind.IfKeyword)
    condition = self.ParseExpression()
    statement = self.ParseStatement()
    elseClause = self.ParseElseClause()
    return Wyvern.IfStatementSyntax.New(keyword, condition, statement, elseClause)
end function

Wyvern.Parser.ParseElseClause = function()
    if self.Current().Kind != Wyvern.SyntaxKind.ElseKeyword then
        return null
    end if

    keyword = self.NextToken()
    statement = self.ParseStatement(false)
    return Wyvern.ElseClauseSyntax.New(keyword, statement)
end function

Wyvern.Parser.ParseSwitchStatement = function()
    keyword = self.MatchToken(Wyvern.SyntaxKind.SwitchKeyword)
    expression = self.ParseExpression()

    openBrace = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    cases = self.ParseCases()
    closeBrace = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)
    return Wyvern.SwitchStatementSyntax.New(keyword, expression, openBrace, cases, closeBrace)
end function

Wyvern.Parser.ParseCaseNode = function()
    caseKeyword = self.MatchToken(Wyvern.SyntaxKind.CaseKeyword)
    expression = self.ParseExpression()
    colon = self.MatchToken(Wyvern.SyntaxKind.ColonToken)
    return Wyvern.CaseSyntax.New(caseKeyword, expression, colon)
end function

Wyvern.Parser.ParseCaseBody = function()
    if self.Current().Kind == Wyvern.SyntaxKind.OpenBraceToken then
        return self.ParseBlockStatement()
    end if

    statements = []
    while self.Current().Kind != Wyvern.SyntaxKind.BreakKeyword and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        currentToken = self.Current()

        statements.push(self.ParseStatement())

        if currentToken == self.Current() then
            break
        end if
    end while
    breakStatement = self.ParseBreakStatement()
    return Wyvern.CaseBodyStatementSyntax.New(statements, breakStatement)
end function

Wyvern.Parser.ParseCase = function()
    cases = []
    while self.Current().Kind == Wyvern.SyntaxKind.CaseKeyword and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        currentToken = self.Current()

        cases.push(self.ParseCaseNode())

        if currentToken == self.Current() then
            break
        end if
    end while

    body = self.ParseCaseBody()
    return Wyvern.CaseStatementSyntax.New(cases, body)
end function

Wyvern.Parser.ParseDefaultStatement = function()
    defaultKeyword = self.MatchToken(Wyvern.SyntaxKind.DefaultKeyword)
    colon = self.MatchToken(Wyvern.SyntaxKind.ColonToken)
    body = self.ParseCaseBody()
    return Wyvern.DefaultStatementSyntax.New(defaultKeyword, colon, body)
end function

Wyvern.Parser.ParseCases = function()
    cases = []
    defaultStatement = null
    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        currentToken = self.Current()

        if self.Current().Kind == Wyvern.SyntaxKind.DefaultKeyword then
            if defaultStatement != null then
                self.Diagnostics.ReportCannotHaveMultipleDefaults(self.Current().Location)
            end if
            defaultStatement = self.ParseDefaultStatement()
        else
            cases.push(self.ParseCase())
        end if

        if currentToken == self.Current() then
            break
        end if
    end while
    return [cases, defaultStatement]
end function

Wyvern.Parser.ParseVariableDeclaration = function()
    if self.Current().Kind == Wyvern.SyntaxKind.LetKeyword then
        expected = Wyvern.SyntaxKind.LetKeyword
    else if self.Current().Kind == Wyvern.SyntaxKind.VarKeyword then
        expected = Wyvern.SyntaxKind.VarKeyword
    else
        expected = Wyvern.SyntaxKind.ConstKeyword
    end if
    keyword = self.MatchToken(expected)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    typeClause = self.ParseTypeClause()
    if self.Current().Kind == Wyvern.SyntaxKind.SemicolonToken then
        semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
        return Wyvern.VariableDeclarationSyntax.New(keyword, identifier, typeClause, null, null, semicolonToken)
    end if
    equalsToken = self.MatchToken(Wyvern.SyntaxKind.EqualsToken)
    initializer = self.ParseExpression()
    semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    return Wyvern.VariableDeclarationSyntax.New(keyword, identifier, typeClause, equalsToken, initializer, semicolonToken)
end function

Wyvern.Parser.ParseTypeSignature = function()
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    mapClause = null
    if self.Current().Kind == Wyvern.SyntaxKind.LessToken then
        lessToken = self.MatchToken(Wyvern.SyntaxKind.LessToken)
        signature = self.ParseTypeSignature()
        greaterToken = self.MatchToken(Wyvern.SyntaxKind.GreaterToken)

        mapClause = Wyvern.MapClauseSyntax.New(lessToken, signature, greaterToken)
    end if

    arrayClauses = []
    while self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken
        openBracket = self.MatchToken(Wyvern.SyntaxKind.OpenBracketToken)
        closeBracket = self.MatchToken(Wyvern.SyntaxKind.CloseBracketToken)
        arrayClauses.push(Wyvern.ArrayClauseSyntax.New(openBracket, closeBracket))
    end while

    return Wyvern.TypeSignatureSyntax.New(identifier, mapClause, arrayClauses)
end function

Wyvern.Parser.ParseTypeClause = function(useArrow=false)
    if useArrow then
        kind = Wyvern.SyntaxKind.ArrowToken
    else
        kind = Wyvern.SyntaxKind.ColonToken
    end if

    if self.Current().Kind != kind then
        return null
    end if
    assignToken = self.MatchToken(kind)

    return Wyvern.TypeClauseSyntax.New(assignToken, self.ParseTypeSignature())
end function

Wyvern.Parser.ParseBlockStatement = function()
    statements = []

    openBraceToken = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)

    while self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken and self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken
        startToken = self.Current()

        statement = self.ParseStatement(true)
        statements.push(statement)

        if self.Current() == startToken then
            self.NextToken()
        end if
    end while

    closeBraceToken = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)

    return Wyvern.BlockStatementSyntax.New(openBraceToken, statements, closeBraceToken)
end function

Wyvern.Parser.ParseExpressionStatement = function(checkForSemi=true)
    expression = self.ParseExpression()
    if checkForSemi then
        semicolonToken = self.MatchToken(Wyvern.SyntaxKind.SemicolonToken)
    else
        semicolonToken = null
    end if
    return Wyvern.ExpressionStatementSyntax.New(expression, semicolonToken)
end function

Wyvern.Parser.ParseExpression = function()
    return self.ParseAssignmentExpression()
end function

Wyvern.Parser.ParseAssignmentExpression = function()
    // a-Z 0-9
    // = 
    if self.Current().Kind == Wyvern.SyntaxKind.IdentifierToken and self.Peek(1).Kind == Wyvern.SyntaxKind.EqualsToken then
        Identifier = self.NextToken()
        operatorToken = self.NextToken()
        right = self.ParseAssignmentExpression()
        return Wyvern.AssignmentExpressionSyntax.New(Identifier, operatorToken, right)
    end if

    return self.ParseBinaryExpression()
end function

Wyvern.Parser.ParseBinaryExpression = function(parentPrecedence=0)
    unaryOperatorPrecedence = Wyvern.SyntaxFacts.GetUnaryOperatorPrecedence(self.Current().Kind)
    if unaryOperatorPrecedence != 0 and unaryOperatorPrecedence >= parentPrecedence then
        Operator = self.NextToken()
        operand = self.ParseBinaryExpression(unaryOperatorPrecedence)
        return Wyvern.UnaryExpressionSyntax.New(Operator, operand)
    else
        left = self.ParsePrimaryExpression()
    end if
    afterOperatorPrecedence = Wyvern.SyntaxFacts.GetPostUnaryOperatorPrecedence(self.Current().Kind)
    if afterOperatorPrecedence != 0 and afterOperatorPrecedence >= parentPrecedence then
        operator = self.NextToken()
        return Wyvern.AfterUnaryExpressionSyntax.New(left, operator)
    end if

    while true
        precedence = Wyvern.SyntaxFacts.GetBinaryOperatorPrecedence(self.Current().Kind)
    
        if precedence == 0 or precedence <= parentPrecedence then break
        Operator = self.NextToken()
        right = self.ParseBinaryExpression(precedence)
        left = Wyvern.BinaryExpressionSyntax.New(left, Operator, right)
    end while

    return left
end function

Wyvern.Parser.ParsePrimaryNamecall = function(expression)
    expression = self.ParseNamecallExpression(expression)
    while self.Current().Kind == Wyvern.SyntaxKind.DotToken
        expression = self.ParseNamecallExpression(expression)
    end while

    if self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken then
        expression = self.ParsePrimaryIndex(expression)
    end if

    return expression
end function

Wyvern.Parser.ParsePrimaryIndex = function(expression)
    expression = self.ParseIndexExpression(expression)
    while self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken
        expression = self.ParseIndexExpression(expression)
    end while

    if self.Current().Kind == Wyvern.SyntaxKind.DotToken then
        expression = self.ParsePrimaryNamecall(expression)
    end if

    return expression
end function

Wyvern.Parser.ParsePrimaryExpression = function()
    if self.Current().Kind == Wyvern.SyntaxKind.OpenParenthesisToken then
        expression = self.ParseParenthesizedExpression()
    else if self.Current().Kind == Wyvern.SyntaxKind.TrueKeyword or self.Current().Kind == Wyvern.SyntaxKind.FalseKeyword then
        expression = self.ParseBooleanLiteral()
    else if self.Current().Kind == Wyvern.SyntaxKind.NumberToken then
        expression = self.ParseNumberLiteral()
    else if self.Current().Kind == Wyvern.SyntaxKind.StringToken then
        expression = self.ParseStringLiteral()
    else if self.Current().Kind == Wyvern.SyntaxKind.NullKeyword then
        expression = self.ParseNullLiteral()
    else if self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken then
        expression = self.ParseArrayExpression()
    else if self.Current().Kind == Wyvern.SyntaxKind.OpenBraceToken then
        expression = self.ParseMapExpression()
    else if self.Current().Kind == Wyvern.SyntaxKind.NewKeyword then
        expression = self.ParseNewExpression()
    else if self.Current().Kind == Wyvern.SyntaxKind.CastKeyword then
        expression = self.ParseCastExpression()
    else if self.Current().Kind == Wyvern.SyntaxKind.UnsafeCastKeyword then
        expression = self.ParseCastExpression(true)
    else
        expression = self.ParseIdentiferBasedExpression()
    end if

    if self.Current().Kind == Wyvern.SyntaxKind.DotToken then
        expression = self.ParsePrimaryNamecall(expression)

        if self.Current().Kind == Wyvern.SyntaxKind.EqualsToken then
            operator = self.NextToken()
            right = self.ParseAssignmentExpression()
            return Wyvern.AssignmentExpressionSyntax.New(expression, operator, right)
        end if
    else if self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken then
        expression = self.ParsePrimaryIndex(expression)

        if self.Current().Kind == Wyvern.SyntaxKind.EqualsToken then
            operator = self.NextToken()
            right = self.ParseAssignmentExpression()
            return Wyvern.AssignmentExpressionSyntax.New(expression, operator, right)
        end if
    end if

    return expression
end function

Wyvern.Parser.ParseCastExpression = function(unsafe=false)
    if not unsafe then
        castKeyword = self.MatchToken(Wyvern.SyntaxKind.CastKeyword)
    else
        castKeyword = self.MatchToken(Wyvern.SyntaxKind.UnsafeCastKeyword)
    end if
    lessToken = self.MatchToken(Wyvern.SyntaxKind.LessToken)
    typeSignature = self.ParseTypeSignature()
    greaterToken = self.MatchToken(Wyvern.SyntaxKind.GreaterToken)

    openParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    expression = self.ParseExpression()
    closeParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)

    return Wyvern.CastExpressionSyntax.New(castKeyword, lessToken, typeSignature, greaterToken, openParenthesisToken, expression, closeParenthesisToken)
end function

Wyvern.Parser.ParseNewExpression = function()
    if self.Current().Kind == Wyvern.SyntaxKind.NewKeyword and self.Peek(1).Kind == Wyvern.SyntaxKind.IdentifierToken and self.Peek(2).Kind == Wyvern.SyntaxKind.OpenBraceToken then
        return self.ParseNewStructExpression()
    end if
    newKeyword = self.MatchToken(Wyvern.SyntaxKind.NewKeyword)
    callExpression = self.ParseCallExpression()
    return Wyvern.NewExpressionSyntax.New(newKeyword, callExpression)
end function

Wyvern.Parser.ParseIndexExpression = function(expression)
    openBracket = self.MatchToken(Wyvern.SyntaxKind.OpenBracketToken)
    valueExpression = self.ParseExpression()
    closeBracket = self.MatchToken(Wyvern.SyntaxKind.CloseBracketToken)

    return Wyvern.IndexExpressionSyntax.New(expression, openBracket, valueExpression, closeBracket)
end function

//Wyvern.Parser.ParseNamecallPrimary = function()
//    expression = self.ParseNameOrCallExpression()
//
//    if self.Current().Kind == Wyvern.SyntaxKind.OpenBracketToken then
//        return self.ParseIndexExpression(expression)
//    else
//        return expression
//    end if
//end function

Wyvern.Parser.ParseNamecallExpression = function(expression)
    dot = self.MatchToken(Wyvern.SyntaxKind.DotToken)
    expr = self.ParseIdentiferBasedExpression()

    return Wyvern.NamecallExpressionSyntax.New(expression, dot, expr)
end function

Wyvern.Parser.ParseArrayExpression = function()
    openBracket = self.MatchToken(Wyvern.SyntaxKind.OpenBracketToken)
    items = self.ParseArray()
    closeBracket = self.MatchToken(Wyvern.SyntaxKind.CloseBracketToken)
    expr = Wyvern.ArrayExpressionSyntax.New(openBracket, items, closeBracket)

    if self.Current().Kind == Wyvern.SyntaxKind.DotToken then
        return self.ParseNamecallExpression(expr)
    end if

    return expr
end function

Wyvern.Parser.ParseArray = function()
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseBracketToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        expression = self.ParseExpression()
        nodesAndSeparators.push(expression)

        if self.Current().Kind != Wyvern.SyntaxKind.CloseBracketToken then
            comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseBracketToken then
                self.Diagnostics.ReportUnexpectedToken(comma, Wyvern.SyntaxKind.CloseBracketToken)
                continue
            end if
            nodesAndSeparators.push(comma)
        end if
    end while

    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseMapExpression = function()
    openBrace = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    pairs = self.ParseMap()
    closeBrace = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)

    return Wyvern.MapExpressionSyntax.New(openBrace, pairs, closeBrace)
end function

Wyvern.Parser.ParsePair = function()
    keyExpression = self.ParsePrimaryExpression()
    colon = self.MatchToken(Wyvern.SyntaxKind.ColonToken)
    valueExpression = self.ParseExpression()

    return Wyvern.PairSyntax.New(keyExpression, colon, valueExpression)
end function

Wyvern.Parser.ParseMap = function()
    nodesAndSeparators = []
    
    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        pair = self.ParsePair()
        nodesAndSeparators.push(pair)

        if self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken then
            comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseBraceToken then
                self.Diagnostics.ReportUnexpectedToken(comma, Wyvern.SyntaxKind.CloseBraceToken)
                continue
            end if
            nodesAndSeparators.push(comma)
        end if
    end while

    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseParenthesizedExpression = function()
    left = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    expression = self.ParseExpression()
    right = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)
    return Wyvern.ParenthesizedExpressionSyntax.New(left, expression, right)
end function

Wyvern.Parser.ParseBooleanLiteral = function()
    isTrue = self.Current().Kind == Wyvern.SyntaxKind.TrueKeyword
    if isTrue then
        keywordToken = self.MatchToken(Wyvern.SyntaxKind.TrueKeyword)
    else
        keywordToken = self.MatchToken(Wyvern.SyntaxKind.FalseKeyword)
    end if

    return Wyvern.LiteralExpressionSyntax.New(keywordToken, isTrue)
end function

Wyvern.Parser.ParseNameExpression = function()
    Identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    return Wyvern.NameExpressionSyntax.New(Identifier)
end function

Wyvern.Parser.ParseCallExpression = function()
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    openParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.OpenParenthesisToken)
    arguments = self.ParseArguments()
    closeParenthesisToken = self.MatchToken(Wyvern.SyntaxKind.CloseParenthesisToken)

    return Wyvern.CallExpressionSyntax.New(identifier, openParenthesisToken, arguments, closeParenthesisToken)
end function

Wyvern.Parser.ParseArguments = function()
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseParenthesisToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        expression = self.ParseExpression()
        nodesAndSeparators.push(expression)

        if self.Current().Kind != Wyvern.SyntaxKind.CloseParenthesisToken then
            comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseParenthesisToken then
                self.Diagnostics.ReportUnexpectedToken(comma, Wyvern.SyntaxKind.CloseParenthesisToken)
                continue
            end if
            nodesAndSeparators.push(comma)
        end if
    end while

    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseStructArgument = function()
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    colon = self.MatchToken(Wyvern.SyntaxKind.ColonToken)
    expression = self.ParseExpression()

    return Wyvern.StructArgumentSyntax.New(identifier, colon, expression)
end function

Wyvern.Parser.ParseStructArguments = function()
    nodesAndSeparators = []

    while self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken and self.Current().Kind != Wyvern.SyntaxKind.EndOfFileToken
        argument = self.ParseStructArgument()
        nodesAndSeparators.push(argument)

        if self.Current().Kind != Wyvern.SyntaxKind.CloseBraceToken then
            comma = self.MatchToken(Wyvern.SyntaxKind.CommaToken)
            if self.Current().Kind == Wyvern.SyntaxKind.CloseBraceToken then
                self.Diagnostics.ReportUnexpectedToken(comma, Wyvern.SyntaxKind.CloseBraceToken)
                continue
            end if
            nodesAndSeparators.push(comma)
        end if
    end while

    return Wyvern.SeperateSyntaxList.New(nodesAndSeparators)
end function

Wyvern.Parser.ParseNewStructExpression = function()
    newKeyword = self.MatchToken(Wyvern.SyntaxKind.NewKeyword)
    identifier = self.MatchToken(Wyvern.SyntaxKind.IdentifierToken)
    
    openBrace = self.MatchToken(Wyvern.SyntaxKind.OpenBraceToken)
    arguments = self.ParseStructArguments()
    closeBrace = self.MatchToken(Wyvern.SyntaxKind.CloseBraceToken)
    
    return Wyvern.NewStructExpressionSyntax.New(newKeyword, identifier, openBrace, arguments, closeBrace)
end function

Wyvern.Parser.ParseIdentiferBasedExpression = function()
    if self.Current().Kind == Wyvern.SyntaxKind.IdentifierToken and self.Peek(1).Kind == Wyvern.SyntaxKind.OpenParenthesisToken then
        return self.ParseCallExpression()
    end if

    return self.ParseNameExpression()
end function

Wyvern.Parser.ParseNumberLiteral = function()
    literalToken = self.MatchToken(Wyvern.SyntaxKind.NumberToken)
    return Wyvern.LiteralExpressionSyntax.New(literalToken)
end function

Wyvern.Parser.ParseStringLiteral = function()
    literalToken = self.MatchToken(Wyvern.SyntaxKind.StringToken)
    return Wyvern.LiteralExpressionSyntax.New(literalToken)
end function

Wyvern.Parser.ParseNullLiteral = function()
    literalToken = self.MatchToken(Wyvern.SyntaxKind.NullKeyword)
    return Wyvern.LiteralExpressionSyntax.New(literalToken)
end function

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Wyvern.SyntaxTree = {"Root":-1, "Diagnostics":-1, "Text":-1, "Imports":-1}

Wyvern.SyntaxTree.Init = function(text, imports=null)
    self.Text = text
    if not imports then imports = []
    self.Imports = imports

    parser = Wyvern.Parser.New(self)
    root = parser.ParseCompilationUnit()
    diagnostics = parser.Diagnostics.ToArray()

    self.Diagnostics = diagnostics
    self.Root = root
    self.Parser = parser
end function

Wyvern.SyntaxTree.New = function(text, imports=null)
    newInstance = new Wyvern.SyntaxTree
    newInstance.Init(text, imports)
    return newInstance
end function

Wyvern.SyntaxTree.Parse = function(text, imports=null)
    if typeof(text) == "string" then
        text = Wyvern.SourceText.From(text)
        return Wyvern.SyntaxTree.Parse(text, imports)
    end if

    return Wyvern.SyntaxTree.New(text, imports)
end function

Wyvern.SyntaxTree.ParseFile = function(file, imports=null)
    text = Wyvern.SourceText.FromFile(file)
    return Wyvern.SyntaxTree.Parse(text, imports)
end function